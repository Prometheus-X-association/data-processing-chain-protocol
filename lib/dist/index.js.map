{"version":3,"sources":["../src/index.ts","../src/types/types.ts","../src/core/Node.ts","../src/extra/Logger.ts","../src/agents/Agent.ts","../src/agents/ReportingAgent.ts","../src/agents/MonitoringAgent.ts","../src/core/PipelineProcessor.ts","../src/core/NodeSupervisor.ts","../src/core/PipelineDataCombiner.ts","../src/extra/http.ts","../src/extra/DefaultResolverCallbacks.ts","../src/extra/DefaultReportingCallbacks.ts"],"sourcesContent":["import { NodeSupervisor } from './core/NodeSupervisor';\r\nimport { PipelineProcessor } from './core/PipelineProcessor';\r\n\r\nexport { NodeSupervisor };\r\n\r\nexport { PipelineProcessor };\r\n\r\nexport {\r\n  ServiceCallback,\r\n  NodeSignal,\r\n  ChainStatus,\r\n  PipelineData,\r\n  PipelineMeta,\r\n  SupervisorPayload,\r\n  CallbackPayload,\r\n  BrodcastSetupMessage,\r\n  ReportingMessage,\r\n  ChainConfig,\r\n  ChainRelation,\r\n  NodeConfig,\r\n  NodeType,\r\n  ProcessorCallback,\r\n  CombineStrategy,\r\n  CombineFonction,\r\n  SupervisorPayloadSetup,\r\n  SupervisorPayloadCreate,\r\n  SupervisorPayloadDelete,\r\n  SupervisorPayloadPause,\r\n  SupervisorPayloadDelay,\r\n  SupervisorPayloadRun,\r\n  SupervisorPayloadSendData,\r\n  SupervisorPayloadPrepareChain,\r\n  SupervisorPayloadStartChain,\r\n  SupervisorPayloadDeployChain,\r\n  ChainState,\r\n  DataType,\r\n  ChainType,\r\n  ProcessorPipeline,\r\n  SetupCallback,\r\n  ServiceConfig,\r\n} from './types/types';\r\n\r\nexport { PipelineDataCombiner } from './core/PipelineDataCombiner';\r\n\r\nexport {\r\n  broadcastSetupCallback,\r\n  BSCPayload,\r\n  remoteServiceCallback,\r\n  RSCPayload,\r\n  setResolverCallbacks,\r\n} from './extra/DefaultResolverCallbacks';\r\n\r\nexport {\r\n  BRCPayload,\r\n  setMonitoringCallbacks,\r\n} from './extra/DefaultReportingCallbacks';\r\n","/* eslint-disable no-unused-vars */\r\nimport { PipelineProcessor } from '../core/PipelineProcessor';\r\n\r\nexport type ProcessorPipeline = PipelineProcessor[];\r\n\r\nexport type PipelineData = unknown;\r\nexport interface PipelineMeta {\r\n  header?: unknown;\r\n  resolver?: string;\r\n  monitoringHost?: string;\r\n  configuration: unknown;\r\n}\r\nexport interface CallbackPayload {\r\n  chainId?: string;\r\n  targetId: string;\r\n  data: PipelineData;\r\n  meta?: PipelineMeta;\r\n}\r\nexport type ServiceCallback = (payload: CallbackPayload) => void;\r\nexport type SetupCallback = (message: BrodcastSetupMessage) => Promise<void>;\r\nexport type ReportingCallback = (message: ReportingMessage) => Promise<void>;\r\nexport type BroadcastReportingCallback = (\r\n  message: BroadcastReportingMessage,\r\n) => Promise<void>;\r\n\r\nexport namespace DefaultCallback {\r\n  // todo: should be remote_service_callback\r\n  export const SERVICE_CALLBACK: ServiceCallback = (\r\n    payload: CallbackPayload,\r\n  ) => {};\r\n  // todo: should be broadcast_setup_callback\r\n  export const SETUP_CALLBACK: SetupCallback = async (\r\n    message: BrodcastSetupMessage,\r\n  ) => {};\r\n  export const REPORTING_CALLBACK: ReportingCallback = async (\r\n    message: ReportingMessage,\r\n  ) => {};\r\n  export const BROADCAST_REPORTING_CALLBACK: ReportingCallback = async (\r\n    message: BroadcastReportingMessage,\r\n  ) => {};\r\n}\r\n\r\nexport type ProcessorCallback = (\r\n  payload: CallbackPayload,\r\n) => Promise<PipelineData>;\r\n\r\nexport namespace NodeType {\r\n  export type Type = 'local' | 'remote';\r\n  export const LOCAL: Type = 'local';\r\n  export const REMOTE: Type = 'remote';\r\n}\r\n\r\nexport namespace DataType {\r\n  export type Type = 'raw' | 'compressed';\r\n  export const RAW: Type = 'raw';\r\n  export const COMPRESSED: Type = 'compressed';\r\n}\r\n\r\nexport namespace CombineStrategy {\r\n  export type Type = 'merge' | 'union' | 'custom';\r\n  export const MERGE: Type = 'merge';\r\n  export const UNION: Type = 'union';\r\n  export const CUSTOM: Type = 'custom';\r\n}\r\n\r\nexport type CombineFonction = (dataSets: PipelineData[]) => unknown[];\r\n\r\nexport interface ChainState {\r\n  completed: string[];\r\n  pending: string[];\r\n  failed: string[];\r\n}\r\n\r\nexport namespace ChainType {\r\n  export type Type = 0b0000010 | 0b00000001;\r\n  export const PERSISTANT: Type = 0b00000010;\r\n  export const DEFAULT: Type = 0b00000001;\r\n}\r\n\r\nexport namespace ChainStatus {\r\n  export type Type =\r\n    | 'node_pending'\r\n    | 'node_in-progress' // running\r\n    | 'node_completed'\r\n    | 'node_failed'\r\n    | 'node_paused'\r\n    | 'node_setup_completed'\r\n    | 'chain_setup_completed';\r\n  export const NODE_PAUSED: Type = 'node_paused';\r\n  export const NODE_PENDING: Type = 'node_pending';\r\n  export const NODE_IN_PROGRESS: Type = 'node_in-progress';\r\n  export const NODE_COMPLETED: Type = 'node_completed';\r\n  export const NODE_FAILED: Type = 'node_failed';\r\n  export const NODE_SETUP_COMPLETED: Type = 'node_setup_completed';\r\n  export const CHAIN_SETUP_COMPLETED: Type = 'chain_setup_completed';\r\n}\r\n\r\n// handler signal\r\nexport namespace NodeSignal {\r\n  export type Type =\r\n    | 'node_setup'\r\n    | 'node_create'\r\n    | 'node_delete'\r\n    | 'node_pause'\r\n    | 'node_delay'\r\n    | 'node_run'\r\n    | 'node_send_data'\r\n    | 'chain_prepare'\r\n    | 'chain_start'\r\n    | 'chain_deploy';\r\n  // | 'chain_setup';\r\n\r\n  export const NODE_SETUP: Type = 'node_setup';\r\n  export const NODE_CREATE: Type = 'node_create';\r\n  export const NODE_DELETE: Type = 'node_delete';\r\n  export const NODE_PAUSE: Type = 'node_pause';\r\n  export const NODE_DELAY: Type = 'node_delay';\r\n  export const NODE_RUN: Type = 'node_run';\r\n  export const NODE_SEND_DATA: Type = 'node_send_data';\r\n  export const CHAIN_PREPARE: Type = 'chain_prepare';\r\n  export const CHAIN_START: Type = 'chain_start';\r\n  export const CHAIN_DEPLOY: Type = 'chain_deploy';\r\n  // export const CHAIN_SETUP: Type = 'chain_setup';\r\n}\r\n\r\nexport type SupervisorPayloadSetup = {\r\n  signal: typeof NodeSignal.NODE_SETUP;\r\n  config: NodeConfig;\r\n};\r\n\r\nexport type SupervisorPayloadCreate = {\r\n  signal: typeof NodeSignal.NODE_CREATE;\r\n  params: NodeConfig;\r\n};\r\n\r\nexport type SupervisorPayloadDelete = {\r\n  signal: typeof NodeSignal.NODE_DELETE;\r\n  id: string;\r\n};\r\n\r\nexport type SupervisorPayloadPause = {\r\n  signal: typeof NodeSignal.NODE_PAUSE;\r\n  id: string;\r\n};\r\n\r\nexport type SupervisorPayloadDelay = {\r\n  signal: typeof NodeSignal.NODE_DELAY;\r\n  id: string;\r\n  delay: number;\r\n};\r\n\r\nexport type SupervisorPayloadRun = {\r\n  signal: typeof NodeSignal.NODE_RUN;\r\n  id: string;\r\n  data: PipelineData;\r\n};\r\n\r\nexport type SupervisorPayloadSendData = {\r\n  signal: typeof NodeSignal.NODE_SEND_DATA;\r\n  id: string;\r\n};\r\n\r\nexport type SupervisorPayloadPrepareChain = {\r\n  signal: typeof NodeSignal.CHAIN_PREPARE;\r\n  id: string;\r\n};\r\n\r\nexport type SupervisorPayloadStartChain = {\r\n  signal: typeof NodeSignal.CHAIN_START;\r\n  id: string;\r\n  data: PipelineData;\r\n};\r\n\r\nexport type SupervisorPayloadDeployChain = {\r\n  signal: typeof NodeSignal.CHAIN_DEPLOY;\r\n  config: ChainConfig;\r\n  data: PipelineData;\r\n};\r\n\r\nexport type SupervisorPayload =\r\n  | SupervisorPayloadSetup\r\n  | SupervisorPayloadCreate\r\n  | SupervisorPayloadDelete\r\n  | SupervisorPayloadPause\r\n  | SupervisorPayloadDelay\r\n  | SupervisorPayloadRun\r\n  | SupervisorPayloadSendData\r\n  | SupervisorPayloadPrepareChain\r\n  | SupervisorPayloadStartChain\r\n  | SupervisorPayloadDeployChain;\r\n\r\nexport interface ServiceConfig {\r\n  targetId: string;\r\n  meta?: PipelineMeta;\r\n}\r\n\r\nexport type NodeConfig = {\r\n  services: (string | ServiceConfig)[];\r\n  chainId: string;\r\n  index?: number;\r\n  location?: NodeType.Type;\r\n  nextTargetId?: string;\r\n  nextMeta?: PipelineMeta;\r\n  chainType?: ChainType.Type;\r\n  monitoringHost?: string;\r\n};\r\n\r\nexport type ChainConfig = NodeConfig[];\r\nexport interface BrodcastSetupMessage {\r\n  signal: NodeSignal.Type;\r\n  chain: {\r\n    id: string;\r\n    config: ChainConfig;\r\n  };\r\n}\r\n\r\nexport interface ReportingPayload {\r\n  chainId: string;\r\n  nodeId: string;\r\n  index: number;\r\n}\r\n\r\nexport interface ReportingMessage extends ReportingPayload {\r\n  signal: ChainStatus.Type;\r\n}\r\n\r\nexport interface BroadcastReportingMessage extends ReportingPayload {\r\n  signal: ChainStatus.Type;\r\n}\r\n\r\nexport interface ChainRelation {\r\n  rootNodeId?: string;\r\n  config: ChainConfig;\r\n}\r\n","import {\r\n  DataType,\r\n  ChainStatus,\r\n  PipelineData,\r\n  ProcessorPipeline,\r\n  NodeType,\r\n  NodeSignal,\r\n  NodeConfig,\r\n  ChainType,\r\n  PipelineMeta,\r\n} from '../types/types';\r\nimport { setTimeout, setImmediate } from 'timers';\r\nimport { randomUUID } from 'node:crypto';\r\nimport { Logger } from '../extra/Logger';\r\nimport { NodeSupervisor } from './NodeSupervisor';\r\nimport { MonitoringAgent, ReportingAgent } from '../agents/MonitoringAgent';\r\n\r\nexport class Node {\r\n  private id: string;\r\n  private pipelines: ProcessorPipeline[];\r\n  // Todo:\r\n  private dependencies: string[];\r\n  private status: ChainStatus.Type;\r\n  private error?: Error;\r\n  private delay: number;\r\n  private progress: number;\r\n  private dataType: DataType.Type;\r\n  private executionQueue: Promise<void>;\r\n  private output: PipelineData[];\r\n  private nextNodeInfo: {\r\n    id: string;\r\n    type: NodeType.Type;\r\n    meta?: PipelineMeta;\r\n  } | null;\r\n  private config: NodeConfig | null;\r\n  private reporting: ReportingAgent | null = null;\r\n\r\n  constructor(dependencies: string[] = []) {\r\n    this.id = randomUUID();\r\n    this.output = [];\r\n    this.pipelines = [];\r\n    this.dependencies = dependencies;\r\n    this.status = ChainStatus.NODE_PENDING;\r\n    this.delay = 0;\r\n    this.progress = 0;\r\n    this.dataType = DataType.RAW;\r\n    this.executionQueue = Promise.resolve();\r\n    this.nextNodeInfo = null;\r\n    this.config = null;\r\n  }\r\n\r\n  private updateProgress(): void {\r\n    this.progress += 1 / this.pipelines.length;\r\n  }\r\n\r\n  setConfig(config: NodeConfig): void {\r\n    const { chainId, index } = config;\r\n    if (index !== undefined) {\r\n      const monitoring = MonitoringAgent.retrieveService();\r\n      this.reporting = monitoring.genReportingAgent({\r\n        chainId,\r\n        nodeId: this.id,\r\n        index,\r\n      });\r\n    } else {\r\n      Logger.warn('Node index is not defined');\r\n    }\r\n    this.config = config;\r\n  }\r\n\r\n  getExecutionQueue(): Promise<void> {\r\n    return this.executionQueue;\r\n  }\r\n  getConfig(): NodeConfig | null {\r\n    return this.config;\r\n  }\r\n\r\n  getId(): string {\r\n    return this.id;\r\n  }\r\n\r\n  addPipeline(pipeline: ProcessorPipeline): void {\r\n    this.pipelines.push(pipeline);\r\n  }\r\n\r\n  // digest the data through successive processing stages\r\n  private async processPipeline(\r\n    pipeline: ProcessorPipeline,\r\n    data: PipelineData,\r\n  ): Promise<PipelineData> {\r\n    let result = data;\r\n    for (const processor of pipeline) {\r\n      result = await processor.digest(result);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private *getPipelineGenerator(\r\n    pipelines: ProcessorPipeline[],\r\n    count: number,\r\n  ): Generator<ProcessorPipeline[], void, unknown> {\r\n    for (let i = 0; i < pipelines.length; i += count) {\r\n      yield pipelines.slice(i, i + count);\r\n    }\r\n  }\r\n\r\n  notify(notify: ChainStatus.Type): void {\r\n    try {\r\n      if (this.reporting !== null) {\r\n        this.reporting.notify(notify);\r\n      } else {\r\n        throw new Error('Reporter not set');\r\n      }\r\n    } catch (error) {\r\n      Logger.error((error as Error).message);\r\n    }\r\n  }\r\n\r\n  async execute(data: PipelineData): Promise<void> {\r\n    this.executionQueue = this.executionQueue.then(async () => {\r\n      try {\r\n        this.updateStatus(ChainStatus.NODE_IN_PROGRESS);\r\n        // todo: monitor this step\r\n        if (this.delay > 0) {\r\n          await this.sleep(this.delay);\r\n        }\r\n\r\n        const generator = this.getPipelineGenerator(this.pipelines, 3);\r\n\r\n        for (const pipelineBatch of generator) {\r\n          await new Promise<void>((resolve, reject) => {\r\n            setImmediate(async () => {\r\n              try {\r\n                const batchPromises = pipelineBatch.map((pipeline) =>\r\n                  this.processPipeline(pipeline, data).then(\r\n                    (pipelineData: PipelineData) => {\r\n                      this.output.push(pipelineData);\r\n                      this.updateProgress();\r\n                      // todo: monitor this step\r\n                    },\r\n                  ),\r\n                );\r\n                await Promise.all(batchPromises);\r\n                resolve();\r\n              } catch (error) {\r\n                reject(error);\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        this.updateStatus(ChainStatus.NODE_COMPLETED);\r\n      } catch (error) {\r\n        this.updateStatus(ChainStatus.NODE_FAILED, error as Error);\r\n        Logger.error(`Node ${this.id} execution failed: ${error}`);\r\n      }\r\n    });\r\n\r\n    const supervisor = NodeSupervisor.retrieveService();\r\n    await supervisor.handleRequest({\r\n      id: this.id,\r\n      signal: NodeSignal.NODE_SEND_DATA,\r\n    });\r\n  }\r\n\r\n  // ...\r\n  async sendData(): Promise<void> {\r\n    // make sure the queue has finished\r\n    await this.executionQueue;\r\n    Logger.info(`Sending data from node ${this.id}.`);\r\n    await Node.terminate(this.id, this.output);\r\n  }\r\n\r\n  private static async terminate(nodeId: string, pipelineData: PipelineData[]) {\r\n    // todo: format data\r\n    const data = pipelineData[0]; // tmp\r\n    await Node.moveToNextNode(nodeId, data);\r\n  }\r\n\r\n  // todo: should not be static\r\n  private static async moveToNextNode(\r\n    nodeId: string,\r\n    pipelineData: PipelineData,\r\n  ) {\r\n    const supervisor = NodeSupervisor.retrieveService();\r\n    const nodes = supervisor.getNodes();\r\n    const currentNode = nodes.get(nodeId);\r\n    if (!currentNode) {\r\n      Logger.warn(`Node ${nodeId} not found for moving to next node.`);\r\n      return;\r\n    }\r\n    const nextNodeInfo = currentNode.getNextNodeInfo();\r\n    if (nextNodeInfo) {\r\n      if (nextNodeInfo.type === NodeType.LOCAL) {\r\n        await supervisor.handleRequest({\r\n          id: nextNodeInfo.id,\r\n          data: pipelineData,\r\n          signal: NodeSignal.NODE_RUN,\r\n        });\r\n      } else if (nextNodeInfo.type === NodeType.REMOTE) {\r\n        supervisor.remoteServiceCallback({\r\n          // targetId and meta are related to the next remote target service uid\r\n          chainId: currentNode.getConfig()?.chainId,\r\n          targetId: nextNodeInfo.id,\r\n          data: pipelineData,\r\n          meta: nextNodeInfo.meta,\r\n        });\r\n      }\r\n    } else {\r\n      Logger.info(`End of pipeline reached by node ${nodeId}.`);\r\n      // currentNode.reporting.notify();\r\n    }\r\n    const isPersistant =\r\n      (currentNode.config?.chainType ?? 0) & ChainType.PERSISTANT;\r\n    if (!isPersistant) {\r\n      await supervisor.handleRequest({\r\n        id: nodeId,\r\n        signal: NodeSignal.NODE_DELETE,\r\n      });\r\n    } else {\r\n      Logger.warn(`Node ${nodeId} kept for future calls.`);\r\n    }\r\n  }\r\n\r\n  getProgress(): number {\r\n    return this.progress;\r\n  }\r\n\r\n  canExecute(executedNodes: Set<string>): boolean {\r\n    return this.dependencies.every((dep) => executedNodes.has(dep));\r\n  }\r\n\r\n  setDelay(delay: number): void {\r\n    this.delay = delay;\r\n  }\r\n\r\n  private sleep(ms: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  getDataType(): DataType.Type {\r\n    return this.dataType;\r\n  }\r\n\r\n  getStatus(): ChainStatus.Type {\r\n    return this.status;\r\n  }\r\n\r\n  getDependencies(): string[] {\r\n    return this.dependencies;\r\n  }\r\n\r\n  updateStatus(status: ChainStatus.Type, error?: Error): void {\r\n    this.status = status;\r\n    if (status === ChainStatus.NODE_FAILED) {\r\n      this.error = error;\r\n    }\r\n  }\r\n  getError(): Error | undefined {\r\n    return this.error;\r\n  }\r\n\r\n  getProcessors(): ProcessorPipeline[] {\r\n    return this.pipelines;\r\n  }\r\n\r\n  setNextNodeInfo(id: string, type: NodeType.Type, meta?: PipelineMeta): void {\r\n    this.nextNodeInfo = { id, type, meta };\r\n  }\r\n\r\n  getNextNodeInfo(): {\r\n    id: string;\r\n    type: NodeType.Type;\r\n    meta?: PipelineMeta;\r\n  } | null {\r\n    return this.nextNodeInfo;\r\n  }\r\n}\r\n","import { WriteStream, createWriteStream, mkdirSync } from 'fs';\r\nimport { join } from 'path';\r\nimport { format } from 'util';\r\n\r\ntype LogLevel = 'info' | 'warn' | 'error' | 'header';\r\n\r\ninterface LoggerConfig {\r\n  preserveLogs?: boolean;\r\n  externalCallback?: (\r\n    _level: LogLevel,\r\n    _message: string,\r\n    _timestamp: string,\r\n  ) => void;\r\n}\r\n\r\nconst Colors = {\r\n  reset: '\\x1b[0m',\r\n  info: '\\x1b[32m', // green\r\n  warn: '\\x1b[93m', // yellow\r\n  error: '\\x1b[31m', // red\r\n  header: '\\x1b[36m', // cyan\r\n} as const;\r\n\r\nexport class Logger {\r\n  private static config: LoggerConfig = {\r\n    preserveLogs: false,\r\n  };\r\n\r\n  static configure(config: LoggerConfig) {\r\n    this.config = { ...this.config, ...config };\r\n  }\r\n\r\n  private static formatMessage(level: LogLevel, message: string): string {\r\n    const now = new Date();\r\n    const year = now.getFullYear();\r\n    const month = String(now.getMonth() + 1).padStart(2, '0');\r\n    const day = String(now.getDate()).padStart(2, '0');\r\n    const hours = String(now.getHours()).padStart(2, '0');\r\n    const minutes = String(now.getMinutes()).padStart(2, '0');\r\n    const seconds = String(now.getSeconds()).padStart(2, '0');\r\n    const timestamp = `${year}-${month}-${day}:${hours}.${minutes}.${seconds}`;\r\n    return `${Colors[level]}${timestamp} [${level.toUpperCase()}]: ${message}${Colors.reset}\\n`;\r\n  }\r\n\r\n  private static log(level: LogLevel, message: string) {\r\n    const timestamp = new Date().toISOString();\r\n    const formattedMessage = this.formatMessage(level, message);\r\n\r\n    process.stdout.write(formattedMessage);\r\n\r\n    if (this.config.preserveLogs && this.config.externalCallback) {\r\n      this.config.externalCallback(level, message, timestamp);\r\n    }\r\n  }\r\n\r\n  static info(message: string | object) {\r\n    const msg = typeof message === 'string' ? message : format(message);\r\n    this.log('info', msg);\r\n  }\r\n\r\n  static warn(message: string | object) {\r\n    const msg = typeof message === 'string' ? message : format(message);\r\n    this.log('warn', msg);\r\n  }\r\n\r\n  static error(message: string | object) {\r\n    const msg = typeof message === 'string' ? message : format(message);\r\n    this.log('error', msg);\r\n  }\r\n\r\n  static header(message: string | object) {\r\n    const msg = typeof message === 'string' ? message : format(message);\r\n    this.log('header', msg);\r\n  }\r\n}\r\n\r\nconst DEFAULT_LOG_PATH = join(process.cwd(), 'logs');\r\nlet logStream: WriteStream;\r\n\r\nconst getLogFileName = () => {\r\n  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\r\n  return `dpcp-${timestamp}.log`;\r\n};\r\n\r\nconst initDiskLogger = () => {\r\n  try {\r\n    mkdirSync(DEFAULT_LOG_PATH, { recursive: true });\r\n    const logFile = join(DEFAULT_LOG_PATH, getLogFileName());\r\n    logStream = createWriteStream(logFile, { flags: 'a' });\r\n    return true;\r\n  } catch (err) {\r\n    process.stderr.write(`Failed to create log directory: ${err}\\n`);\r\n    return false;\r\n  }\r\n};\r\n\r\nconst defaultDiskCallback = (\r\n  level: LogLevel,\r\n  message: string,\r\n  timestamp: string,\r\n) => {\r\n  if (!logStream && !initDiskLogger()) {\r\n    return;\r\n  }\r\n  const plainMessage = `${timestamp} [LOGGER][${level.toUpperCase()}]: ${message}\\n`;\r\n  logStream.write(plainMessage);\r\n};\r\n\r\nLogger.configure({\r\n  preserveLogs: true,\r\n  externalCallback: defaultDiskCallback,\r\n});\r\n","import EventEmitter from 'node:events';\r\nimport { randomUUID } from 'node:crypto';\r\n\r\nexport abstract class Agent extends EventEmitter {\r\n  protected uid: string;\r\n  constructor() {\r\n    super();\r\n    this.uid = randomUUID();\r\n  }\r\n}\r\n","import { Logger } from '../extra/Logger';\r\nimport { Agent } from './Agent';\r\nimport { ChainStatus } from '../types/types';\r\n\r\n// Node monitoring and status reporting agent\r\nexport abstract class ReportingAgentBase extends Agent {\r\n  private static authorizedAgent: Agent | null = null;\r\n  private status: ChainStatus.Type[] = [];\r\n  constructor() {\r\n    super();\r\n    if (!(ReportingAgentBase.authorizedAgent instanceof Agent)) {\r\n      throw new Error(\r\n        'Node Reporter needs to be instantiated by an authorized Agent',\r\n      );\r\n    }\r\n    ReportingAgentBase.authorizedAgent = null;\r\n  }\r\n\r\n  static authorize(agent: Agent): void {\r\n    ReportingAgentBase.authorizedAgent = agent;\r\n  }\r\n\r\n  notify(status: ChainStatus.Type): void {\r\n    Logger.info(`Status ${status} from ${this.uid}`);\r\n    this.status.push(status);\r\n    this.emit('signal', status);\r\n  }\r\n\r\n  getSignals(): ChainStatus.Type[] {\r\n    return this.status;\r\n  }\r\n}\r\n","import {\r\n  DefaultCallback,\r\n  ReportingCallback,\r\n  ReportingMessage,\r\n  ReportingPayload,\r\n} from '../types/types';\r\nimport { Logger } from '../extra/Logger';\r\nimport { Agent } from './Agent';\r\nimport { ReportingAgentBase } from './ReportingAgent';\r\n\r\nexport class ReportingAgent extends ReportingAgentBase {\r\n  constructor(\r\n    // eslint-disable-next-line no-unused-vars\r\n    readonly chainId: string,\r\n    // eslint-disable-next-line no-unused-vars\r\n    readonly nodeId: string,\r\n  ) {\r\n    super();\r\n  }\r\n}\r\n\r\n// Receive reports from NodeReporters\r\nexport class MonitoringAgent extends Agent {\r\n  private static instance: MonitoringAgent;\r\n  private reportingCallback: ReportingCallback;\r\n  private broadcastReportingCallback: ReportingCallback;\r\n  private remoteMonitoringHost: Map<string, string>;\r\n  // chain-id:node-reporter-agent-id\r\n  // private reportings: Map<string, string>;\r\n  constructor() {\r\n    super();\r\n    this.remoteMonitoringHost = new Map();\r\n    this.reportingCallback = DefaultCallback.REPORTING_CALLBACK;\r\n    this.broadcastReportingCallback =\r\n      DefaultCallback.BROADCAST_REPORTING_CALLBACK;\r\n  }\r\n\r\n  static retrieveService(refresh: boolean = false): MonitoringAgent {\r\n    if (!MonitoringAgent.instance || refresh) {\r\n      const instance = new MonitoringAgent();\r\n      MonitoringAgent.instance = instance;\r\n    }\r\n    return MonitoringAgent.instance;\r\n  }\r\n\r\n  setReportingCallback(reportingCallback: ReportingCallback): void {\r\n    this.reportingCallback = reportingCallback;\r\n  }\r\n\r\n  setBroadcastReportingCallback(\r\n    broadcastReportingCallback: ReportingCallback,\r\n  ): void {\r\n    this.broadcastReportingCallback = broadcastReportingCallback;\r\n  }\r\n\r\n  getRemoteMonitoringHost(chainId: string): string | undefined {\r\n    return this.remoteMonitoringHost.get(chainId);\r\n  }\r\n\r\n  setRemoteMonitoringHost(chainId: string, remoteMonitoringHost: string): void {\r\n    this.remoteMonitoringHost.set(chainId, remoteMonitoringHost);\r\n  }\r\n\r\n  genReportingAgent(payload: ReportingPayload): ReportingAgent {\r\n    const { chainId, nodeId, index } = payload;\r\n    ReportingAgent.authorize(this);\r\n    const reporting = new ReportingAgent(chainId, nodeId);\r\n    reporting.on('signal', async (signal) => {\r\n      Logger.info(`Receive signal: ${signal}`);\r\n      const message: ReportingMessage = { ...payload, signal };\r\n      if (index > 0) {\r\n        void this.broadcastReportingCallback(message);\r\n      } else {\r\n        await this.reportingCallback(message);\r\n      }\r\n    });\r\n    return reporting;\r\n  }\r\n}\r\n","import {\r\n  PipelineData,\r\n  PipelineMeta,\r\n  ProcessorCallback,\r\n  ServiceConfig,\r\n} from 'types/types';\r\n\r\nexport class PipelineProcessor {\r\n  static callbackService: ProcessorCallback;\r\n  private meta?: PipelineMeta;\r\n  private targetId: string;\r\n  constructor(config: ServiceConfig) {\r\n    this.targetId = config.targetId;\r\n    this.meta = config.meta;\r\n  }\r\n  static setCallbackService(callbackService: ProcessorCallback): void {\r\n    PipelineProcessor.callbackService = callbackService;\r\n  }\r\n\r\n  async digest(data: PipelineData): Promise<PipelineData> {\r\n    if (PipelineProcessor.callbackService) {\r\n      return await PipelineProcessor.callbackService({\r\n        targetId: this.targetId,\r\n        meta: this.meta,\r\n        data,\r\n      });\r\n    }\r\n    return {};\r\n  }\r\n}\r\n","import { Node } from './Node';\r\nimport {\r\n  ServiceCallback,\r\n  NodeSignal,\r\n  ChainStatus,\r\n  PipelineData,\r\n  SupervisorPayload,\r\n  CallbackPayload,\r\n  BrodcastSetupMessage,\r\n  ChainConfig,\r\n  ChainRelation,\r\n  NodeConfig,\r\n  NodeType,\r\n  SupervisorPayloadSetup,\r\n  SupervisorPayloadCreate,\r\n  SupervisorPayloadDelay,\r\n  SupervisorPayloadDelete,\r\n  SupervisorPayloadPause,\r\n  SupervisorPayloadRun,\r\n  SupervisorPayloadSendData,\r\n  SetupCallback,\r\n  SupervisorPayloadPrepareChain,\r\n  SupervisorPayloadStartChain,\r\n  SupervisorPayloadDeployChain,\r\n  ServiceConfig,\r\n  DefaultCallback,\r\n  ReportingCallback,\r\n  BroadcastReportingCallback,\r\n} from '../types/types';\r\nimport { Logger } from '../extra/Logger';\r\nimport { PipelineProcessor } from './PipelineProcessor';\r\nimport { randomUUID } from 'node:crypto';\r\nimport { MonitoringAgent } from 'agents/MonitoringAgent';\r\n\r\n// Should be ChainSupervisor\r\nexport class NodeSupervisor {\r\n  private uid: string;\r\n  private ctn: string;\r\n  private static instance: NodeSupervisor;\r\n  private nodes: Map<string, Node>;\r\n  private chains: Map<string, ChainRelation>;\r\n\r\n  private broadcastSetupCallback: SetupCallback;\r\n  remoteServiceCallback: ServiceCallback;\r\n\r\n  private constructor() {\r\n    this.uid = '@supervisor:default';\r\n    this.ctn = '@container:default';\r\n    this.nodes = new Map();\r\n    this.chains = new Map();\r\n    this.remoteServiceCallback = DefaultCallback.SERVICE_CALLBACK;\r\n    this.broadcastSetupCallback = DefaultCallback.SETUP_CALLBACK;\r\n    // eslint-disable-next-line no-unused-vars\r\n    async (message: BrodcastSetupMessage) => {};\r\n  }\r\n\r\n  static retrieveService(refresh: boolean = false): NodeSupervisor {\r\n    if (!NodeSupervisor.instance || refresh) {\r\n      const instance = new NodeSupervisor();\r\n      NodeSupervisor.instance = instance;\r\n    }\r\n    return NodeSupervisor.instance;\r\n  }\r\n\r\n  setRemoteServiceCallback(remoteServiceCallback: ServiceCallback): void {\r\n    this.remoteServiceCallback = remoteServiceCallback;\r\n  }\r\n\r\n  setBroadcastSetupCallback(broadcastSetupCallback: SetupCallback): void {\r\n    this.broadcastSetupCallback = broadcastSetupCallback;\r\n  }\r\n\r\n  setBroadcastReportingCallback(\r\n    broadcastReportingCallback: BroadcastReportingCallback,\r\n  ): void {\r\n    const monitoring = MonitoringAgent.retrieveService();\r\n    monitoring.setBroadcastReportingCallback(broadcastReportingCallback);\r\n  }\r\n\r\n  setMonitoringCallback(reportingCallback: ReportingCallback): void {\r\n    const monitoring = MonitoringAgent.retrieveService();\r\n    monitoring.setReportingCallback(reportingCallback);\r\n  }\r\n\r\n  setUid(uid: string) {\r\n    this.ctn = `@container:${uid}`;\r\n    this.uid = `@supervisor:${uid}`;\r\n  }\r\n\r\n  async handleRequest(payload: SupervisorPayload): Promise<void | string> {\r\n    switch (payload.signal) {\r\n      case NodeSignal.NODE_SETUP:\r\n        return await this.setupNode((payload as SupervisorPayloadSetup).config);\r\n      case NodeSignal.NODE_CREATE:\r\n        return await this.createNode(\r\n          (payload as SupervisorPayloadCreate).params,\r\n        );\r\n      case NodeSignal.NODE_DELETE:\r\n        return await this.deleteNode((payload as SupervisorPayloadDelete).id);\r\n      case NodeSignal.NODE_PAUSE:\r\n        return await this.pauseNode((payload as SupervisorPayloadPause).id);\r\n      case NodeSignal.NODE_DELAY:\r\n        return await this.delayNode(\r\n          (payload as SupervisorPayloadDelay).id,\r\n          (payload as SupervisorPayloadDelay).delay,\r\n        );\r\n      case NodeSignal.NODE_RUN:\r\n        return await this.runNode(\r\n          (payload as SupervisorPayloadRun).id,\r\n          (payload as SupervisorPayloadRun).data,\r\n        );\r\n      case NodeSignal.NODE_SEND_DATA:\r\n        return await this.sendNodeData(\r\n          (payload as SupervisorPayloadSendData).id,\r\n        );\r\n      case NodeSignal.CHAIN_PREPARE:\r\n        return await this.prepareChainDistribution(\r\n          (payload as SupervisorPayloadPrepareChain).id,\r\n        );\r\n      case NodeSignal.CHAIN_START:\r\n        return await this.startChain(\r\n          (payload as SupervisorPayloadStartChain).id,\r\n          (payload as SupervisorPayloadStartChain).data,\r\n        );\r\n      case NodeSignal.CHAIN_DEPLOY: {\r\n        return await this.deployChain(\r\n          (payload as SupervisorPayloadDeployChain).config,\r\n          // (payload as SupervisorPayloadDeployChain).data,\r\n        );\r\n      }\r\n      default:\r\n        Logger.warn(`${this.ctn}: Unknown signal received: ${payload.signal}`);\r\n    }\r\n  }\r\n\r\n  private async deployChain(\r\n    config: ChainConfig,\r\n    // data: PipelineData,\r\n  ): Promise<string> {\r\n    if (!config) {\r\n      throw new Error(`${this.ctn}: Chain configuration is required`);\r\n    }\r\n    Logger.info(`${this.ctn}: Starting a new chain deployment...`);\r\n    const chainId = this.createChain(config);\r\n    await this.prepareChainDistribution(chainId);\r\n    // await this.startChain(chainId, data);\r\n    Logger.info(\r\n      `${this.ctn}: Chain ${chainId} successfully deployed and started.`,\r\n    );\r\n    return chainId;\r\n  }\r\n\r\n  private async createNode(config: NodeConfig): Promise<string> {\r\n    const node = new Node();\r\n    const nodeId = node.getId();\r\n    node.setConfig(config);\r\n    this.nodes.set(nodeId, node);\r\n    Logger.info(\r\n      `${this.ctn}: Node ${nodeId} created with config: ${JSON.stringify(config, null, 2)}`,\r\n    );\r\n    return nodeId;\r\n  }\r\n\r\n  private async setupNode(\r\n    config: NodeConfig,\r\n    initiator: boolean = false,\r\n  ): Promise<string> {\r\n    this.updateChain([config]);\r\n    const nodeId = await this.createNode(config);\r\n    const node = this.nodes.get(nodeId);\r\n\r\n    if (!node) {\r\n      Logger.warn(`${this.ctn}: Attempted to setup undefined node`);\r\n      return nodeId;\r\n    }\r\n\r\n    await this.setRemoteMonitoringHost(config);\r\n\r\n    const processors = config.services.map(\r\n      (service) =>\r\n        new PipelineProcessor(\r\n          typeof service === 'string' ? { targetId: service } : service,\r\n        ),\r\n    );\r\n    await this.addProcessors(nodeId, processors);\r\n    Logger.info(\r\n      `${this.ctn}: Node ${nodeId} setup completed with ${processors.length} processors`,\r\n    );\r\n\r\n    if (config.nextTargetId !== undefined) {\r\n      node.setNextNodeInfo(\r\n        config.nextTargetId,\r\n        NodeType.REMOTE,\r\n        config.nextMeta,\r\n      );\r\n    } else if (!initiator) {\r\n      Logger.warn(\r\n        `${this.ctn}: Cannot set next node info: nextTargetId is undefined`,\r\n      );\r\n      this.notify(nodeId, ChainStatus.CHAIN_SETUP_COMPLETED);\r\n    }\r\n    this.notify(nodeId, ChainStatus.NODE_SETUP_COMPLETED);\r\n    return nodeId;\r\n  }\r\n\r\n  handleNotification(chainId: string, status: ChainStatus.Type): void {\r\n    try {\r\n      const chain = this.chains.get(chainId);\r\n      if (!chain) {\r\n        Logger.warn(`${this.ctn}: Chain with ID ${chainId} not found.`);\r\n        return;\r\n      }\r\n      const rootNodeId = chain.rootNodeId;\r\n      if (!rootNodeId) {\r\n        Logger.warn(`${this.ctn}: Root node ID missing for chain ${chainId}.`);\r\n        return;\r\n      }\r\n      const node = this.nodes.get(rootNodeId);\r\n      if (!node) {\r\n        Logger.warn(`${this.ctn}: Node with ID ${rootNodeId} not found.`);\r\n        return;\r\n      }\r\n      node.notify(status);\r\n      Logger.info(\r\n        `${this.ctn}: Notification sent to node ${rootNodeId} with status ${status}.`,\r\n      );\r\n    } catch (error) {\r\n      Logger.error(\r\n        `${this.ctn}: Failed to handle notification for chain ${chainId}: ${(error as Error).message}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  private notify(nodeId: string, status: ChainStatus.Type): void {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      node.notify(status);\r\n    } else {\r\n      Logger.warn(`${this.ctn}: Can't notify non-existing node ${nodeId}`);\r\n    }\r\n  }\r\n\r\n  // Todo: set as private ?\r\n  async addProcessors(\r\n    nodeId: string,\r\n    processors: PipelineProcessor[],\r\n  ): Promise<void> {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      node.addPipeline(processors);\r\n      Logger.info(`${this.ctn}: Processors added to Node ${nodeId}.`);\r\n    } else {\r\n      Logger.warn(`${this.ctn}: Node ${nodeId} not found.`);\r\n    }\r\n  }\r\n\r\n  private async deleteNode(nodeId: string): Promise<void> {\r\n    if (this.nodes.has(nodeId)) {\r\n      this.nodes.delete(nodeId);\r\n      Logger.info(`${this.ctn}: Node ${nodeId} deleted.`);\r\n    } else {\r\n      Logger.warn(`${this.ctn}: Node ${nodeId} not found.`);\r\n    }\r\n  }\r\n\r\n  private async pauseNode(nodeId: string): Promise<void> {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      node.updateStatus(ChainStatus.NODE_PAUSED);\r\n      Logger.info(`${this.ctn}: Node ${nodeId} paused.`);\r\n    } else {\r\n      Logger.warn(`${this.ctn}: Node ${nodeId} not found.`);\r\n    }\r\n  }\r\n\r\n  private async delayNode(nodeId: string, delay: number): Promise<void> {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      node.setDelay(delay);\r\n      Logger.info(`${this.ctn}: Node ${nodeId} delayed by ${delay} ms.`);\r\n    } else {\r\n      Logger.warn(`${this.ctn}: Node ${nodeId} not found.`);\r\n    }\r\n  }\r\n\r\n  createChain(config: ChainConfig): string {\r\n    const timestamp = Date.now();\r\n    const chainId = `${this.uid}-${timestamp}-${randomUUID().slice(0, 8)}`;\r\n    const relation: ChainRelation = {\r\n      config,\r\n    };\r\n    this.chains.set(chainId, relation);\r\n    const monitoringHost = config[0]?.monitoringHost;\r\n    config.forEach((value: NodeConfig, index: number) => {\r\n      value.index = index;\r\n      value.monitoringHost = monitoringHost;\r\n    });\r\n    Logger.header(`${this.ctn}: Chain ${chainId} creation has started...`);\r\n    return chainId;\r\n  }\r\n\r\n  // todo: review\r\n  private updateChain(config: ChainConfig): string {\r\n    if (config.length === 0 || !config[0].chainId) {\r\n      throw new Error('Invalid chain configuration');\r\n    }\r\n    const chainId = config[0].chainId;\r\n    let relation = this.chains.get(chainId);\r\n\r\n    if (relation) {\r\n      relation.config = relation.config.concat(config);\r\n      Logger.info(\r\n        `${this.ctn}: Chain ${chainId} updated with ${config.length} new configurations`,\r\n      );\r\n    } else {\r\n      relation = {\r\n        config: config,\r\n      };\r\n      this.chains.set(chainId, relation);\r\n      Logger.info(\r\n        `${this.ctn}: Chain ${chainId} created with ${config.length} configurations`,\r\n      );\r\n    }\r\n    return chainId;\r\n  }\r\n\r\n  private async setRemoteMonitoringHost(config: NodeConfig): Promise<void> {\r\n    const remoteMonitoringHost = config.monitoringHost;\r\n    if (!remoteMonitoringHost) {\r\n      throw new Error(\r\n        `${this.ctn}: No Monitoring Host set for Chain ${config.chainId} during distribution`,\r\n      );\r\n    }\r\n    const monitoring = MonitoringAgent.retrieveService();\r\n    monitoring.setRemoteMonitoringHost(config.chainId, remoteMonitoringHost);\r\n  }\r\n\r\n  async prepareChainDistribution(chainId: string): Promise<void> {\r\n    Logger.header(\r\n      `${this.ctn}: Chain distribution for ${chainId} in progress...`,\r\n    );\r\n    const chain = this.chains.get(chainId);\r\n    if (!chain) {\r\n      throw new Error(`${this.ctn}: Chain ${chainId} not found`);\r\n    }\r\n    const chainConfig: ChainConfig = chain.config;\r\n    const localConfigs: NodeConfig[] = chainConfig.filter(\r\n      (config) => config.location === 'local',\r\n    );\r\n    const remoteConfigs: NodeConfig[] = chainConfig.filter(\r\n      (config) => config.location === 'remote',\r\n    );\r\n\r\n    if (localConfigs.length > 0) {\r\n      const rootNodeId = await this.setupNode(\r\n        { ...localConfigs[0], chainId },\r\n        true,\r\n      );\r\n      chain.rootNodeId = rootNodeId;\r\n\r\n      let prevNodeId = rootNodeId;\r\n      for (let i = 1; i < localConfigs.length; i++) {\r\n        const currentNodeId = await this.setupNode(\r\n          {\r\n            ...localConfigs[i],\r\n            chainId,\r\n          },\r\n          true,\r\n        );\r\n        const prevNode = this.nodes.get(prevNodeId);\r\n        if (prevNode) {\r\n          prevNode.setNextNodeInfo(currentNodeId, NodeType.LOCAL);\r\n        }\r\n        prevNodeId = currentNodeId;\r\n      }\r\n\r\n      // Set the last local node to point to the first remote service\r\n      if (remoteConfigs.length > 0 && remoteConfigs[0].services.length > 0) {\r\n        const lastLocalNode = this.nodes.get(prevNodeId);\r\n        if (lastLocalNode) {\r\n          const nextService = remoteConfigs[0].services[0];\r\n          lastLocalNode.setNextNodeInfo(\r\n            typeof nextService === 'string'\r\n              ? nextService\r\n              : nextService.targetId,\r\n            NodeType.REMOTE,\r\n            typeof nextService === 'string' ? void 0 : nextService.meta,\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      Logger.warn(\r\n        `${this.ctn}: No local config found for chain ${chainId}. Root node unavailable.`,\r\n      );\r\n    }\r\n\r\n    if (remoteConfigs.length > 0) {\r\n      const updatedRemoteConfigs: NodeConfig[] = remoteConfigs.map(\r\n        (config, index) => {\r\n          const nextConfig: string | ServiceConfig =\r\n            remoteConfigs[index + 1]?.services[0];\r\n          const nodeConfig: NodeConfig = {\r\n            ...config,\r\n            nextTargetId: nextConfig\r\n              ? typeof nextConfig === 'string'\r\n                ? nextConfig\r\n                : nextConfig.targetId\r\n              : undefined,\r\n            nextMeta:\r\n              nextConfig && typeof nextConfig !== 'string'\r\n                ? nextConfig.meta\r\n                : undefined,\r\n          };\r\n          return nodeConfig;\r\n        },\r\n      );\r\n      await this.broadcastNodeSetupSignal(chainId, updatedRemoteConfigs);\r\n    }\r\n  }\r\n\r\n  async broadcastNodeSetupSignal(\r\n    chainId: string,\r\n    remoteConfigs: ChainConfig,\r\n  ): Promise<void> {\r\n    const message: BrodcastSetupMessage = {\r\n      signal: NodeSignal.NODE_SETUP,\r\n      chain: {\r\n        id: chainId,\r\n        config: remoteConfigs,\r\n      },\r\n    };\r\n\r\n    try {\r\n      await this.broadcastSetupCallback(message);\r\n      Logger.info(\r\n        `${this.ctn}: Node creation signal broadcasted with chainId: ${chainId} for remote configs`,\r\n      );\r\n    } catch (error) {\r\n      Logger.error(\r\n        `${this.ctn}: Failed to broadcast node creation signal: ${error}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  async startChain(chainId: string, data: PipelineData): Promise<void> {\r\n    Logger.header(`Chain ${chainId} requested...`);\r\n    const chain = this.chains.get(chainId);\r\n    if (!chain) {\r\n      Logger.warn(`Chain ${chainId} not found.`);\r\n      return;\r\n    }\r\n    const rootNodeId = chain.rootNodeId;\r\n    if (!rootNodeId) {\r\n      Logger.error(`${this.ctn}: Root node ID for chain ${chainId} not found.`);\r\n      return;\r\n    }\r\n\r\n    const rootNode = this.nodes.get(rootNodeId);\r\n\r\n    if (!rootNode) {\r\n      Logger.error(\r\n        `${this.ctn}: Root node ${rootNodeId} for chain ${chainId} not found.`,\r\n      );\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.runNode(rootNodeId, data);\r\n      Logger.info(\r\n        `${this.ctn}: Chain ${chainId} started with root node ${rootNodeId}.`,\r\n      );\r\n    } catch (error) {\r\n      Logger.error(`${this.ctn}: Failed to start chain ${chainId}: ${error}`);\r\n    }\r\n  }\r\n\r\n  private async runNode(nodeId: string, data: PipelineData): Promise<void> {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      await node.execute(data);\r\n    } else {\r\n      Logger.warn(`${this.ctn}: Node ${nodeId} not found.`);\r\n    }\r\n  }\r\n\r\n  async runNodeByRelation(payload: CallbackPayload): Promise<void> {\r\n    try {\r\n      const { targetId, chainId, data } = payload;\r\n      Logger.info(`Received data for node hosting target ${targetId}`);\r\n      if (chainId === undefined) {\r\n        throw new Error('chainId is undefined');\r\n      }\r\n      if (targetId === undefined) {\r\n        throw new Error('targetId is undefined');\r\n      }\r\n      const node = this.getNodesByServiceAndChain(targetId, chainId);\r\n      if (!node || node.length === 0) {\r\n        throw new Error(\r\n          `No node found for targetId ${targetId} and chainId ${chainId}`,\r\n        );\r\n      }\r\n      const nodeId = node[0].getId();\r\n      if (nodeId === undefined) {\r\n        throw new Error(\r\n          `No node ID exists for targetId ${targetId} and chainId ${chainId}`,\r\n        );\r\n      }\r\n      await this.handleRequest({\r\n        signal: NodeSignal.NODE_RUN,\r\n        id: nodeId,\r\n        data: data as PipelineData,\r\n      });\r\n    } catch (error) {\r\n      Logger.error(`Error in runNodeByRelation: ${(error as Error).message}`);\r\n    }\r\n  }\r\n\r\n  private async sendNodeData(nodeId: string): Promise<void> {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      try {\r\n        await node.sendData();\r\n      } catch (err) {\r\n        const error = err as Error;\r\n        Logger.error(\r\n          `${this.ctn}: Node ${nodeId} send data failed: ${error.message}`,\r\n        );\r\n      }\r\n    } else {\r\n      Logger.warn(`${this.ctn}: Node ${nodeId} not found.`);\r\n    }\r\n  }\r\n\r\n  getNodes(): Map<string, Node> {\r\n    return this.nodes;\r\n  }\r\n\r\n  //\r\n  getNodesByServiceAndChain(serviceUid: string, chainId: string): Node[] {\r\n    return Array.from(this.nodes.values()).filter((node) => {\r\n      const nodeConfig = node.getConfig();\r\n      if (!nodeConfig) {\r\n        return false;\r\n      }\r\n      return (\r\n        nodeConfig.chainId === chainId &&\r\n        nodeConfig.services.some((service) =>\r\n          typeof service === 'string'\r\n            ? service === serviceUid\r\n            : service.targetId === serviceUid,\r\n        )\r\n      );\r\n    });\r\n  }\r\n}\r\n","import { CombineStrategy, CombineFonction, PipelineData } from '../types/types';\r\n\r\nexport class PipelineDataCombiner {\r\n  private strategy: CombineStrategy.Type;\r\n  private customCombineFunction?: CombineFonction;\r\n\r\n  constructor(\r\n    strategy: CombineStrategy.Type = CombineStrategy.MERGE,\r\n    customCombineFunction?: CombineFonction,\r\n  ) {\r\n    this.strategy = strategy;\r\n    this.customCombineFunction = customCombineFunction;\r\n  }\r\n\r\n  private merge(dataSets: PipelineData[]): PipelineData {\r\n    return dataSets.flat();\r\n  }\r\n\r\n  private union(dataSets: PipelineData[]): PipelineData {\r\n    const mergedData = this.merge(dataSets);\r\n    if (Array.isArray(mergedData)) {\r\n      return Array.from(new Set(mergedData));\r\n    }\r\n    throw new Error('PipelineData must be an array.');\r\n  }\r\n\r\n  applyStrategy(dataSets: PipelineData[]): PipelineData {\r\n    switch (this.strategy) {\r\n      case CombineStrategy.MERGE:\r\n        return this.merge(dataSets);\r\n      case CombineStrategy.UNION:\r\n        return this.union(dataSets);\r\n      case CombineStrategy.CUSTOM:\r\n        if (this.customCombineFunction) {\r\n          return this.customCombineFunction(dataSets);\r\n        }\r\n        throw new Error('Custom combine function is not defined.');\r\n      default:\r\n        throw new Error(`Unknown combine strategy: ${this.strategy}`);\r\n    }\r\n  }\r\n\r\n  setStrategy(strategy: CombineStrategy.Type): void {\r\n    this.strategy = strategy;\r\n  }\r\n\r\n  setCustomCombineFunction(combineFunction: CombineFonction): void {\r\n    this.customCombineFunction = combineFunction;\r\n  }\r\n}\r\n","import { Buffer } from 'buffer';\r\nimport * as http from 'http';\r\nimport * as https from 'https';\r\n\r\nexport const post = async (url: URL, data: string): Promise<string> => {\r\n  const useSSL = url.protocol === 'https:';\r\n  const options = {\r\n    hostname: url.hostname,\r\n    port: url.port || (useSSL ? '443' : '80'),\r\n    path: url.pathname,\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      'Content-Length': Buffer.byteLength(data),\r\n    },\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    const req = (useSSL ? https : http).request(options, (res) => {\r\n      let data = '';\r\n      res.on('data', (chunk) => {\r\n        data += chunk;\r\n      });\r\n\r\n      res.on('end', () => {\r\n        if (res.statusCode && res.statusCode >= 200 && res.statusCode < 300) {\r\n          resolve(data);\r\n        } else {\r\n          reject(\r\n            new Error(\r\n              `HTTP Error: ${res.statusCode} ${res.statusMessage} - URL: ${options.hostname}${options.path}`,\r\n            ),\r\n          );\r\n        }\r\n      });\r\n    });\r\n\r\n    req.on('error', (error) => {\r\n      reject(new Error(`Request failed to ${url.href}: ${error.message}`));\r\n    });\r\n\r\n    req.write(data);\r\n    req.end();\r\n  });\r\n};\r\n","import { Logger } from './Logger';\r\nimport {\r\n  BrodcastSetupMessage,\r\n  CallbackPayload,\r\n  ChainConfig,\r\n  PipelineMeta,\r\n} from '../types/types';\r\nimport { NodeSupervisor } from '../core/NodeSupervisor';\r\nimport { post } from './http';\r\n\r\nexport type HostResolverCallback = (\r\n  // eslint-disable-next-line no-unused-vars\r\n  targetId: string,\r\n  // eslint-disable-next-line no-unused-vars\r\n  meta?: PipelineMeta,\r\n) => string | undefined;\r\nexport interface BSCPayload {\r\n  message: BrodcastSetupMessage;\r\n  hostResolver: HostResolverCallback;\r\n  path: string;\r\n}\r\n\r\nexport const broadcastSetupCallback = async (\r\n  payload: BSCPayload,\r\n): Promise<void> => {\r\n  const { message, hostResolver, path } = payload;\r\n  Logger.info(`Broadcast message: ${JSON.stringify(message, null, 2)}`);\r\n  const chainConfigs: ChainConfig = message.chain.config;\r\n  const chainId: string = message.chain.id;\r\n\r\n  for (const config of chainConfigs) {\r\n    if (config.services.length === 0) {\r\n      Logger.warn('Empty services array encountered in config');\r\n      continue;\r\n    }\r\n    const service = config.services[0];\r\n    const targetId: string =\r\n      typeof service === 'string' ? service : service.targetId;\r\n    const meta = typeof service === 'string' ? undefined : service.meta;\r\n\r\n    const host = hostResolver(targetId, meta);\r\n    if (!host) {\r\n      Logger.warn(`No container address found for targetId: ${targetId}`);\r\n      continue;\r\n    }\r\n    try {\r\n      // Send a POST request to set up the node on a remote container with the specified host address\r\n      const data = JSON.stringify({\r\n        chainId,\r\n        remoteConfigs: config,\r\n      });\r\n      const url = new URL(path, host);\r\n      void post(url, data);\r\n    } catch (error) {\r\n      Logger.error(\r\n        `Unexpected error sending setup request to ${host} for targetId ${targetId}: ${(error as Error).message}`,\r\n      );\r\n    }\r\n  }\r\n};\r\n\r\nexport interface RSCPayload {\r\n  cbPayload: CallbackPayload;\r\n  hostResolver: HostResolverCallback;\r\n  path: string;\r\n}\r\n\r\nexport const remoteServiceCallback = async (payload: RSCPayload) => {\r\n  const { cbPayload, hostResolver, path } = payload;\r\n  Logger.info(`Service callback payload: ${JSON.stringify(payload, null, 2)}`);\r\n  try {\r\n    if (!cbPayload.chainId) {\r\n      throw new Error('payload.chainId is undefined');\r\n    }\r\n\r\n    const nextConnectorUrl = hostResolver(cbPayload.targetId, cbPayload.meta);\r\n    if (!nextConnectorUrl) {\r\n      throw new Error(\r\n        `Next connector URI not found for the following target service: ${cbPayload.targetId}`,\r\n      );\r\n    }\r\n\r\n    const url = new URL(path, nextConnectorUrl);\r\n    Logger.info(`Sending data to next connector on: ${url.href}`);\r\n    const data = JSON.stringify(cbPayload);\r\n    await post(url, data);\r\n  } catch (error) {\r\n    Logger.error(\r\n      `Error sending data to next connector: ${(error as Error).message}`,\r\n    );\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport interface DefaultCallbackPayload {\r\n  supervisor: NodeSupervisor;\r\n  paths: { setup: string; run: string };\r\n  hostResolver: HostResolverCallback;\r\n}\r\nexport const setResolverCallbacks = async (\r\n  dcPayload: DefaultCallbackPayload,\r\n): Promise<void> => {\r\n  const { supervisor, paths, hostResolver } = dcPayload;\r\n\r\n  supervisor.setBroadcastSetupCallback(\r\n    async (message: BrodcastSetupMessage): Promise<void> => {\r\n      const payload: BSCPayload = {\r\n        message,\r\n        hostResolver,\r\n        path: paths.setup,\r\n      };\r\n      await broadcastSetupCallback(payload);\r\n    },\r\n  );\r\n\r\n  supervisor.setRemoteServiceCallback(\r\n    async (cbPayload: CallbackPayload): Promise<void> => {\r\n      const payload: RSCPayload = {\r\n        cbPayload,\r\n        hostResolver,\r\n        path: paths.run,\r\n      };\r\n      await remoteServiceCallback(payload);\r\n    },\r\n  );\r\n};\r\n","import { ReportingMessage, BroadcastReportingMessage } from '../types/types';\r\nimport { NodeSupervisor } from '../core/NodeSupervisor';\r\nimport { Logger } from './Logger';\r\nimport { post } from './http';\r\nimport { MonitoringAgent } from 'agents/MonitoringAgent';\r\n\r\nexport type ReportSignalHandlerCallback = (\r\n  // eslint-disable-next-line no-unused-vars\r\n  message: ReportingMessage,\r\n) => Promise<void>;\r\n\r\nexport type MonitoringResolverCallback = (\r\n  // eslint-disable-next-line no-unused-vars\r\n  chainId: string,\r\n) => Promise<string | undefined>;\r\n\r\nexport interface MCPayload {\r\n  message: ReportingMessage;\r\n  reportSignalHandler: ReportSignalHandlerCallback;\r\n}\r\n\r\nexport interface BRCPayload {\r\n  message: BroadcastReportingMessage;\r\n  path: string;\r\n  monitoringResolver: MonitoringResolverCallback;\r\n}\r\n\r\n// Default broadcastReportingCallback to be set on initial supervisor\r\nexport const reportingCallback = async (payload: MCPayload): Promise<void> => {\r\n  Logger.info(JSON.stringify(payload, null, 2));\r\n  const { message, reportSignalHandler } = payload;\r\n  await reportSignalHandler(message);\r\n};\r\nexport interface DefaultReportingCallbackPayload {\r\n  supervisor: NodeSupervisor;\r\n  paths: { notify: string };\r\n  reportSignalHandler: ReportSignalHandlerCallback;\r\n  monitoringResolver?: MonitoringResolverCallback;\r\n}\r\n\r\nconst defaultMonitoringResolver = async (\r\n  chainId: string,\r\n): Promise<string | undefined> => {\r\n  try {\r\n    const monitoring = MonitoringAgent.retrieveService();\r\n    const monitoringHost = monitoring.getRemoteMonitoringHost(chainId);\r\n    if (monitoringHost !== undefined) {\r\n      Logger.info({\r\n        message: `Resolving host for monitoring: ${monitoringHost}`,\r\n      });\r\n      return monitoringHost;\r\n    } else throw new Error('monitoring not found');\r\n  } catch (error) {\r\n    Logger.error({ message: (error as Error).message });\r\n  }\r\n};\r\n\r\nconst broadcastReportingCallback = async (\r\n  payload: BRCPayload,\r\n): Promise<void> => {\r\n  const { message, path, monitoringResolver } = payload;\r\n  const monitoringHost = await monitoringResolver(message.chainId);\r\n  const url = new URL(path, monitoringHost);\r\n  const data = JSON.stringify(message);\r\n  Logger.info(`Data send to ${url}: ${JSON.stringify(data, null, 2)}`);\r\n  await post(url, data);\r\n};\r\n\r\nexport const setMonitoringCallbacks = async (\r\n  dcPayload: DefaultReportingCallbackPayload,\r\n): Promise<void> => {\r\n  const { supervisor, paths, reportSignalHandler, monitoringResolver } =\r\n    dcPayload;\r\n\r\n  supervisor.setMonitoringCallback(\r\n    async (message: ReportingMessage): Promise<void> => {\r\n      const payload: MCPayload = {\r\n        message,\r\n        reportSignalHandler,\r\n      };\r\n      await reportingCallback(payload);\r\n    },\r\n  );\r\n\r\n  supervisor.setBroadcastReportingCallback(\r\n    async (message: BroadcastReportingMessage): Promise<void> => {\r\n      const payload: BRCPayload = {\r\n        message,\r\n        path: paths.notify,\r\n        monitoringResolver: monitoringResolver ?? defaultMonitoringResolver,\r\n      };\r\n      await broadcastReportingCallback(payload);\r\n    },\r\n  );\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACyBO,IAAU;AAAA,CAAV,CAAUA,qBAAV;AAEE,EAAMA,iBAAA,mBAAoC,CAC/C,YACG;AAAA,EAAC;AAEC,EAAMA,iBAAA,iBAAgC,CAC3C,YACG;AAAA,EAAC;AACC,EAAMA,iBAAA,qBAAwC,CACnD,YACG;AAAA,EAAC;AACC,EAAMA,iBAAA,+BAAkD,CAC7D,YACG;AAAA,EAAC;AAAA,GAdS;AAqBV,IAAU;AAAA,CAAV,CAAUC,cAAV;AAEE,EAAMA,UAAA,QAAc;AACpB,EAAMA,UAAA,SAAe;AAAA,GAHb;AAMV,IAAU;AAAA,CAAV,CAAUC,cAAV;AAEE,EAAMA,UAAA,MAAY;AAClB,EAAMA,UAAA,aAAmB;AAAA,GAHjB;AAMV,IAAU;AAAA,CAAV,CAAUC,qBAAV;AAEE,EAAMA,iBAAA,QAAc;AACpB,EAAMA,iBAAA,QAAc;AACpB,EAAMA,iBAAA,SAAe;AAAA,GAJb;AAeV,IAAU;AAAA,CAAV,CAAUC,eAAV;AAEE,EAAMA,WAAA,aAAmB;AACzB,EAAMA,WAAA,UAAgB;AAAA,GAHd;AAMV,IAAU;AAAA,CAAV,CAAUC,iBAAV;AASE,EAAMA,aAAA,cAAoB;AAC1B,EAAMA,aAAA,eAAqB;AAC3B,EAAMA,aAAA,mBAAyB;AAC/B,EAAMA,aAAA,iBAAuB;AAC7B,EAAMA,aAAA,cAAoB;AAC1B,EAAMA,aAAA,uBAA6B;AACnC,EAAMA,aAAA,wBAA8B;AAAA,GAf5B;AAmBV,IAAU;AAAA,CAAV,CAAUC,gBAAV;AAcE,EAAMA,YAAA,aAAmB;AACzB,EAAMA,YAAA,cAAoB;AAC1B,EAAMA,YAAA,cAAoB;AAC1B,EAAMA,YAAA,aAAmB;AACzB,EAAMA,YAAA,aAAmB;AACzB,EAAMA,YAAA,WAAiB;AACvB,EAAMA,YAAA,iBAAuB;AAC7B,EAAMA,YAAA,gBAAsB;AAC5B,EAAMA,YAAA,cAAoB;AAC1B,EAAMA,YAAA,eAAqB;AAAA,GAvBnB;;;ACvFjB,oBAAyC;AACzC,IAAAC,sBAA2B;;;ACZ3B,gBAA0D;AAC1D,kBAAqB;AACrB,kBAAuB;AAavB,IAAM,SAAS;AAAA,EACb,OAAO;AAAA,EACP,MAAM;AAAA;AAAA,EACN,MAAM;AAAA;AAAA,EACN,OAAO;AAAA;AAAA,EACP,QAAQ;AAAA;AACV;AAEO,IAAM,SAAN,MAAa;AAAA,EAKlB,OAAO,UAAU,QAAsB;AACrC,SAAK,SAAS,kCAAK,KAAK,SAAW;AAAA,EACrC;AAAA,EAEA,OAAe,cAAc,OAAiB,SAAyB;AACrE,UAAM,MAAM,oBAAI,KAAK;AACrB,UAAM,OAAO,IAAI,YAAY;AAC7B,UAAM,QAAQ,OAAO,IAAI,SAAS,IAAI,CAAC,EAAE,SAAS,GAAG,GAAG;AACxD,UAAM,MAAM,OAAO,IAAI,QAAQ,CAAC,EAAE,SAAS,GAAG,GAAG;AACjD,UAAM,QAAQ,OAAO,IAAI,SAAS,CAAC,EAAE,SAAS,GAAG,GAAG;AACpD,UAAM,UAAU,OAAO,IAAI,WAAW,CAAC,EAAE,SAAS,GAAG,GAAG;AACxD,UAAM,UAAU,OAAO,IAAI,WAAW,CAAC,EAAE,SAAS,GAAG,GAAG;AACxD,UAAM,YAAY,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,OAAO,IAAI,OAAO;AACxE,WAAO,GAAG,OAAO,KAAK,CAAC,GAAG,SAAS,KAAK,MAAM,YAAY,CAAC,MAAM,OAAO,GAAG,OAAO,KAAK;AAAA;AAAA,EACzF;AAAA,EAEA,OAAe,IAAI,OAAiB,SAAiB;AACnD,UAAM,aAAY,oBAAI,KAAK,GAAE,YAAY;AACzC,UAAM,mBAAmB,KAAK,cAAc,OAAO,OAAO;AAE1D,YAAQ,OAAO,MAAM,gBAAgB;AAErC,QAAI,KAAK,OAAO,gBAAgB,KAAK,OAAO,kBAAkB;AAC5D,WAAK,OAAO,iBAAiB,OAAO,SAAS,SAAS;AAAA,IACxD;AAAA,EACF;AAAA,EAEA,OAAO,KAAK,SAA0B;AACpC,UAAM,MAAM,OAAO,YAAY,WAAW,cAAU,oBAAO,OAAO;AAClE,SAAK,IAAI,QAAQ,GAAG;AAAA,EACtB;AAAA,EAEA,OAAO,KAAK,SAA0B;AACpC,UAAM,MAAM,OAAO,YAAY,WAAW,cAAU,oBAAO,OAAO;AAClE,SAAK,IAAI,QAAQ,GAAG;AAAA,EACtB;AAAA,EAEA,OAAO,MAAM,SAA0B;AACrC,UAAM,MAAM,OAAO,YAAY,WAAW,cAAU,oBAAO,OAAO;AAClE,SAAK,IAAI,SAAS,GAAG;AAAA,EACvB;AAAA,EAEA,OAAO,OAAO,SAA0B;AACtC,UAAM,MAAM,OAAO,YAAY,WAAW,cAAU,oBAAO,OAAO;AAClE,SAAK,IAAI,UAAU,GAAG;AAAA,EACxB;AACF;AAnDa,OACI,SAAuB;AAAA,EACpC,cAAc;AAChB;AAkDF,IAAM,uBAAmB,kBAAK,QAAQ,IAAI,GAAG,MAAM;AACnD,IAAI;AAEJ,IAAM,iBAAiB,MAAM;AAC3B,QAAM,aAAY,oBAAI,KAAK,GAAE,YAAY,EAAE,QAAQ,SAAS,GAAG;AAC/D,SAAO,QAAQ,SAAS;AAC1B;AAEA,IAAM,iBAAiB,MAAM;AAC3B,MAAI;AACF,6BAAU,kBAAkB,EAAE,WAAW,KAAK,CAAC;AAC/C,UAAM,cAAU,kBAAK,kBAAkB,eAAe,CAAC;AACvD,oBAAY,6BAAkB,SAAS,EAAE,OAAO,IAAI,CAAC;AACrD,WAAO;AAAA,EACT,SAAS,KAAK;AACZ,YAAQ,OAAO,MAAM,mCAAmC,GAAG;AAAA,CAAI;AAC/D,WAAO;AAAA,EACT;AACF;AAEA,IAAM,sBAAsB,CAC1B,OACA,SACA,cACG;AACH,MAAI,CAAC,aAAa,CAAC,eAAe,GAAG;AACnC;AAAA,EACF;AACA,QAAM,eAAe,GAAG,SAAS,aAAa,MAAM,YAAY,CAAC,MAAM,OAAO;AAAA;AAC9E,YAAU,MAAM,YAAY;AAC9B;AAEA,OAAO,UAAU;AAAA,EACf,cAAc;AAAA,EACd,kBAAkB;AACpB,CAAC;;;AC/GD,yBAAyB;AACzB,yBAA2B;AAEpB,IAAe,QAAf,cAA6B,mBAAAC,QAAa;AAAA,EAE/C,cAAc;AACZ,UAAM;AACN,SAAK,UAAM,+BAAW;AAAA,EACxB;AACF;;;ACJO,IAAe,sBAAf,MAAe,4BAA2B,MAAM;AAAA,EAGrD,cAAc;AACZ,UAAM;AAFR,SAAQ,SAA6B,CAAC;AAGpC,QAAI,EAAE,oBAAmB,2BAA2B,QAAQ;AAC1D,YAAM,IAAI;AAAA,QACR;AAAA,MACF;AAAA,IACF;AACA,wBAAmB,kBAAkB;AAAA,EACvC;AAAA,EAEA,OAAO,UAAU,OAAoB;AACnC,wBAAmB,kBAAkB;AAAA,EACvC;AAAA,EAEA,OAAO,QAAgC;AACrC,WAAO,KAAK,UAAU,MAAM,SAAS,KAAK,GAAG,EAAE;AAC/C,SAAK,OAAO,KAAK,MAAM;AACvB,SAAK,KAAK,UAAU,MAAM;AAAA,EAC5B;AAAA,EAEA,aAAiC;AAC/B,WAAO,KAAK;AAAA,EACd;AACF;AA1BsB,oBACL,kBAAgC;AAD1C,IAAe,qBAAf;;;ACKA,IAAM,iBAAN,cAA6B,mBAAmB;AAAA,EACrD,YAEW,SAEA,QACT;AACA,UAAM;AAJG;AAEA;AAAA,EAGX;AACF;AAGO,IAAM,kBAAN,MAAM,yBAAwB,MAAM;AAAA;AAAA;AAAA,EAOzC,cAAc;AACZ,UAAM;AACN,SAAK,uBAAuB,oBAAI,IAAI;AACpC,SAAK,oBAAoB,gBAAgB;AACzC,SAAK,6BACH,gBAAgB;AAAA,EACpB;AAAA,EAEA,OAAO,gBAAgB,UAAmB,OAAwB;AAChE,QAAI,CAAC,iBAAgB,YAAY,SAAS;AACxC,YAAM,WAAW,IAAI,iBAAgB;AACrC,uBAAgB,WAAW;AAAA,IAC7B;AACA,WAAO,iBAAgB;AAAA,EACzB;AAAA,EAEA,qBAAqBC,oBAA4C;AAC/D,SAAK,oBAAoBA;AAAA,EAC3B;AAAA,EAEA,8BACEC,6BACM;AACN,SAAK,6BAA6BA;AAAA,EACpC;AAAA,EAEA,wBAAwB,SAAqC;AAC3D,WAAO,KAAK,qBAAqB,IAAI,OAAO;AAAA,EAC9C;AAAA,EAEA,wBAAwB,SAAiB,sBAAoC;AAC3E,SAAK,qBAAqB,IAAI,SAAS,oBAAoB;AAAA,EAC7D;AAAA,EAEA,kBAAkB,SAA2C;AAC3D,UAAM,EAAE,SAAS,QAAQ,MAAM,IAAI;AACnC,mBAAe,UAAU,IAAI;AAC7B,UAAM,YAAY,IAAI,eAAe,SAAS,MAAM;AACpD,cAAU,GAAG,UAAU,CAAO,WAAW;AACvC,aAAO,KAAK,mBAAmB,MAAM,EAAE;AACvC,YAAM,UAA4B,iCAAK,UAAL,EAAc,OAAO;AACvD,UAAI,QAAQ,GAAG;AACb,aAAK,KAAK,2BAA2B,OAAO;AAAA,MAC9C,OAAO;AACL,cAAM,KAAK,kBAAkB,OAAO;AAAA,MACtC;AAAA,IACF,EAAC;AACD,WAAO;AAAA,EACT;AACF;;;AJ7DO,IAAM,OAAN,MAAM,MAAK;AAAA,EAoBhB,YAAY,eAAyB,CAAC,GAAG;AAFzC,SAAQ,YAAmC;AAGzC,SAAK,SAAK,gCAAW;AACrB,SAAK,SAAS,CAAC;AACf,SAAK,YAAY,CAAC;AAClB,SAAK,eAAe;AACpB,SAAK,SAAS,YAAY;AAC1B,SAAK,QAAQ;AACb,SAAK,WAAW;AAChB,SAAK,WAAW,SAAS;AACzB,SAAK,iBAAiB,QAAQ,QAAQ;AACtC,SAAK,eAAe;AACpB,SAAK,SAAS;AAAA,EAChB;AAAA,EAEQ,iBAAuB;AAC7B,SAAK,YAAY,IAAI,KAAK,UAAU;AAAA,EACtC;AAAA,EAEA,UAAU,QAA0B;AAClC,UAAM,EAAE,SAAS,MAAM,IAAI;AAC3B,QAAI,UAAU,QAAW;AACvB,YAAM,aAAa,gBAAgB,gBAAgB;AACnD,WAAK,YAAY,WAAW,kBAAkB;AAAA,QAC5C;AAAA,QACA,QAAQ,KAAK;AAAA,QACb;AAAA,MACF,CAAC;AAAA,IACH,OAAO;AACL,aAAO,KAAK,2BAA2B;AAAA,IACzC;AACA,SAAK,SAAS;AAAA,EAChB;AAAA,EAEA,oBAAmC;AACjC,WAAO,KAAK;AAAA,EACd;AAAA,EACA,YAA+B;AAC7B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,QAAgB;AACd,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,YAAY,UAAmC;AAC7C,SAAK,UAAU,KAAK,QAAQ;AAAA,EAC9B;AAAA;AAAA,EAGc,gBACZ,UACA,MACuB;AAAA;AACvB,UAAI,SAAS;AACb,iBAAW,aAAa,UAAU;AAChC,iBAAS,MAAM,UAAU,OAAO,MAAM;AAAA,MACxC;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEA,CAAS,qBACP,WACA,OAC+C;AAC/C,aAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,KAAK,OAAO;AAChD,YAAM,UAAU,MAAM,GAAG,IAAI,KAAK;AAAA,IACpC;AAAA,EACF;AAAA,EAEA,OAAO,QAAgC;AACrC,QAAI;AACF,UAAI,KAAK,cAAc,MAAM;AAC3B,aAAK,UAAU,OAAO,MAAM;AAAA,MAC9B,OAAO;AACL,cAAM,IAAI,MAAM,kBAAkB;AAAA,MACpC;AAAA,IACF,SAAS,OAAO;AACd,aAAO,MAAO,MAAgB,OAAO;AAAA,IACvC;AAAA,EACF;AAAA,EAEM,QAAQ,MAAmC;AAAA;AAC/C,WAAK,iBAAiB,KAAK,eAAe,KAAK,MAAY;AACzD,YAAI;AACF,eAAK,aAAa,YAAY,gBAAgB;AAE9C,cAAI,KAAK,QAAQ,GAAG;AAClB,kBAAM,KAAK,MAAM,KAAK,KAAK;AAAA,UAC7B;AAEA,gBAAM,YAAY,KAAK,qBAAqB,KAAK,WAAW,CAAC;AAE7D,qBAAW,iBAAiB,WAAW;AACrC,kBAAM,IAAI,QAAc,CAAC,SAAS,WAAW;AAC3C,8CAAa,MAAY;AACvB,oBAAI;AACF,wBAAM,gBAAgB,cAAc;AAAA,oBAAI,CAAC,aACvC,KAAK,gBAAgB,UAAU,IAAI,EAAE;AAAA,sBACnC,CAAC,iBAA+B;AAC9B,6BAAK,OAAO,KAAK,YAAY;AAC7B,6BAAK,eAAe;AAAA,sBAEtB;AAAA,oBACF;AAAA,kBACF;AACA,wBAAM,QAAQ,IAAI,aAAa;AAC/B,0BAAQ;AAAA,gBACV,SAAS,OAAO;AACd,yBAAO,KAAK;AAAA,gBACd;AAAA,cACF,EAAC;AAAA,YACH,CAAC;AAAA,UACH;AAEA,eAAK,aAAa,YAAY,cAAc;AAAA,QAC9C,SAAS,OAAO;AACd,eAAK,aAAa,YAAY,aAAa,KAAc;AACzD,iBAAO,MAAM,QAAQ,KAAK,EAAE,sBAAsB,KAAK,EAAE;AAAA,QAC3D;AAAA,MACF,EAAC;AAED,YAAM,aAAa,eAAe,gBAAgB;AAClD,YAAM,WAAW,cAAc;AAAA,QAC7B,IAAI,KAAK;AAAA,QACT,QAAQ,WAAW;AAAA,MACrB,CAAC;AAAA,IACH;AAAA;AAAA;AAAA,EAGM,WAA0B;AAAA;AAE9B,YAAM,KAAK;AACX,aAAO,KAAK,0BAA0B,KAAK,EAAE,GAAG;AAChD,YAAM,MAAK,UAAU,KAAK,IAAI,KAAK,MAAM;AAAA,IAC3C;AAAA;AAAA,EAEA,OAAqB,UAAU,QAAgB,cAA8B;AAAA;AAE3E,YAAM,OAAO,aAAa,CAAC;AAC3B,YAAM,MAAK,eAAe,QAAQ,IAAI;AAAA,IACxC;AAAA;AAAA;AAAA,EAGA,OAAqB,eACnB,QACA,cACA;AAAA;AAvLJ;AAwLI,YAAM,aAAa,eAAe,gBAAgB;AAClD,YAAM,QAAQ,WAAW,SAAS;AAClC,YAAM,cAAc,MAAM,IAAI,MAAM;AACpC,UAAI,CAAC,aAAa;AAChB,eAAO,KAAK,QAAQ,MAAM,qCAAqC;AAC/D;AAAA,MACF;AACA,YAAM,eAAe,YAAY,gBAAgB;AACjD,UAAI,cAAc;AAChB,YAAI,aAAa,SAAS,SAAS,OAAO;AACxC,gBAAM,WAAW,cAAc;AAAA,YAC7B,IAAI,aAAa;AAAA,YACjB,MAAM;AAAA,YACN,QAAQ,WAAW;AAAA,UACrB,CAAC;AAAA,QACH,WAAW,aAAa,SAAS,SAAS,QAAQ;AAChD,qBAAW,sBAAsB;AAAA;AAAA,YAE/B,UAAS,iBAAY,UAAU,MAAtB,mBAAyB;AAAA,YAClC,UAAU,aAAa;AAAA,YACvB,MAAM;AAAA,YACN,MAAM,aAAa;AAAA,UACrB,CAAC;AAAA,QACH;AAAA,MACF,OAAO;AACL,eAAO,KAAK,mCAAmC,MAAM,GAAG;AAAA,MAE1D;AACA,YAAM,iBACH,uBAAY,WAAZ,mBAAoB,cAApB,YAAiC,KAAK,UAAU;AACnD,UAAI,CAAC,cAAc;AACjB,cAAM,WAAW,cAAc;AAAA,UAC7B,IAAI;AAAA,UACJ,QAAQ,WAAW;AAAA,QACrB,CAAC;AAAA,MACH,OAAO;AACL,eAAO,KAAK,QAAQ,MAAM,yBAAyB;AAAA,MACrD;AAAA,IACF;AAAA;AAAA,EAEA,cAAsB;AACpB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,WAAW,eAAqC;AAC9C,WAAO,KAAK,aAAa,MAAM,CAAC,QAAQ,cAAc,IAAI,GAAG,CAAC;AAAA,EAChE;AAAA,EAEA,SAAS,OAAqB;AAC5B,SAAK,QAAQ;AAAA,EACf;AAAA,EAEQ,MAAM,IAA2B;AACvC,WAAO,IAAI,QAAQ,CAAC,gBAAY,0BAAW,SAAS,EAAE,CAAC;AAAA,EACzD;AAAA,EAEA,cAA6B;AAC3B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,YAA8B;AAC5B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,kBAA4B;AAC1B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,aAAa,QAA0B,OAAqB;AAC1D,SAAK,SAAS;AACd,QAAI,WAAW,YAAY,aAAa;AACtC,WAAK,QAAQ;AAAA,IACf;AAAA,EACF;AAAA,EACA,WAA8B;AAC5B,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,gBAAqC;AACnC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,gBAAgB,IAAY,MAAqB,MAA2B;AAC1E,SAAK,eAAe,EAAE,IAAI,MAAM,KAAK;AAAA,EACvC;AAAA,EAEA,kBAIS;AACP,WAAO,KAAK;AAAA,EACd;AACF;;;AK9QO,IAAM,oBAAN,MAAM,mBAAkB;AAAA,EAI7B,YAAY,QAAuB;AACjC,SAAK,WAAW,OAAO;AACvB,SAAK,OAAO,OAAO;AAAA,EACrB;AAAA,EACA,OAAO,mBAAmB,iBAA0C;AAClE,uBAAkB,kBAAkB;AAAA,EACtC;AAAA,EAEM,OAAO,MAA2C;AAAA;AACtD,UAAI,mBAAkB,iBAAiB;AACrC,eAAO,MAAM,mBAAkB,gBAAgB;AAAA,UAC7C,UAAU,KAAK;AAAA,UACf,MAAM,KAAK;AAAA,UACX;AAAA,QACF,CAAC;AAAA,MACH;AACA,aAAO,CAAC;AAAA,IACV;AAAA;AACF;;;ACEA,IAAAC,sBAA2B;AAIpB,IAAM,iBAAN,MAAM,gBAAe;AAAA,EAUlB,cAAc;AACpB,SAAK,MAAM;AACX,SAAK,MAAM;AACX,SAAK,QAAQ,oBAAI,IAAI;AACrB,SAAK,SAAS,oBAAI,IAAI;AACtB,SAAK,wBAAwB,gBAAgB;AAC7C,SAAK,yBAAyB,gBAAgB;AAE9C,KAAO,YAAkC;AAAA,IAAC;AAAA,EAC5C;AAAA,EAEA,OAAO,gBAAgB,UAAmB,OAAuB;AAC/D,QAAI,CAAC,gBAAe,YAAY,SAAS;AACvC,YAAM,WAAW,IAAI,gBAAe;AACpC,sBAAe,WAAW;AAAA,IAC5B;AACA,WAAO,gBAAe;AAAA,EACxB;AAAA,EAEA,yBAAyBC,wBAA8C;AACrE,SAAK,wBAAwBA;AAAA,EAC/B;AAAA,EAEA,0BAA0BC,yBAA6C;AACrE,SAAK,yBAAyBA;AAAA,EAChC;AAAA,EAEA,8BACEC,6BACM;AACN,UAAM,aAAa,gBAAgB,gBAAgB;AACnD,eAAW,8BAA8BA,2BAA0B;AAAA,EACrE;AAAA,EAEA,sBAAsBC,oBAA4C;AAChE,UAAM,aAAa,gBAAgB,gBAAgB;AACnD,eAAW,qBAAqBA,kBAAiB;AAAA,EACnD;AAAA,EAEA,OAAO,KAAa;AAClB,SAAK,MAAM,cAAc,GAAG;AAC5B,SAAK,MAAM,eAAe,GAAG;AAAA,EAC/B;AAAA,EAEM,cAAc,SAAoD;AAAA;AACtE,cAAQ,QAAQ,QAAQ;AAAA,QACtB,KAAK,WAAW;AACd,iBAAO,MAAM,KAAK,UAAW,QAAmC,MAAM;AAAA,QACxE,KAAK,WAAW;AACd,iBAAO,MAAM,KAAK;AAAA,YACf,QAAoC;AAAA,UACvC;AAAA,QACF,KAAK,WAAW;AACd,iBAAO,MAAM,KAAK,WAAY,QAAoC,EAAE;AAAA,QACtE,KAAK,WAAW;AACd,iBAAO,MAAM,KAAK,UAAW,QAAmC,EAAE;AAAA,QACpE,KAAK,WAAW;AACd,iBAAO,MAAM,KAAK;AAAA,YACf,QAAmC;AAAA,YACnC,QAAmC;AAAA,UACtC;AAAA,QACF,KAAK,WAAW;AACd,iBAAO,MAAM,KAAK;AAAA,YACf,QAAiC;AAAA,YACjC,QAAiC;AAAA,UACpC;AAAA,QACF,KAAK,WAAW;AACd,iBAAO,MAAM,KAAK;AAAA,YACf,QAAsC;AAAA,UACzC;AAAA,QACF,KAAK,WAAW;AACd,iBAAO,MAAM,KAAK;AAAA,YACf,QAA0C;AAAA,UAC7C;AAAA,QACF,KAAK,WAAW;AACd,iBAAO,MAAM,KAAK;AAAA,YACf,QAAwC;AAAA,YACxC,QAAwC;AAAA,UAC3C;AAAA,QACF,KAAK,WAAW,cAAc;AAC5B,iBAAO,MAAM,KAAK;AAAA,YACf,QAAyC;AAAA;AAAA,UAE5C;AAAA,QACF;AAAA,QACA;AACE,iBAAO,KAAK,GAAG,KAAK,GAAG,8BAA8B,QAAQ,MAAM,EAAE;AAAA,MACzE;AAAA,IACF;AAAA;AAAA,EAEc,YACZ,QAEiB;AAAA;AACjB,UAAI,CAAC,QAAQ;AACX,cAAM,IAAI,MAAM,GAAG,KAAK,GAAG,mCAAmC;AAAA,MAChE;AACA,aAAO,KAAK,GAAG,KAAK,GAAG,sCAAsC;AAC7D,YAAM,UAAU,KAAK,YAAY,MAAM;AACvC,YAAM,KAAK,yBAAyB,OAAO;AAE3C,aAAO;AAAA,QACL,GAAG,KAAK,GAAG,WAAW,OAAO;AAAA,MAC/B;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEc,WAAW,QAAqC;AAAA;AAC5D,YAAM,OAAO,IAAI,KAAK;AACtB,YAAM,SAAS,KAAK,MAAM;AAC1B,WAAK,UAAU,MAAM;AACrB,WAAK,MAAM,IAAI,QAAQ,IAAI;AAC3B,aAAO;AAAA,QACL,GAAG,KAAK,GAAG,UAAU,MAAM,yBAAyB,KAAK,UAAU,QAAQ,MAAM,CAAC,CAAC;AAAA,MACrF;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEc,UACZ,QACA,YAAqB,OACJ;AAAA;AACjB,WAAK,YAAY,CAAC,MAAM,CAAC;AACzB,YAAM,SAAS,MAAM,KAAK,WAAW,MAAM;AAC3C,YAAM,OAAO,KAAK,MAAM,IAAI,MAAM;AAElC,UAAI,CAAC,MAAM;AACT,eAAO,KAAK,GAAG,KAAK,GAAG,qCAAqC;AAC5D,eAAO;AAAA,MACT;AAEA,YAAM,KAAK,wBAAwB,MAAM;AAEzC,YAAM,aAAa,OAAO,SAAS;AAAA,QACjC,CAAC,YACC,IAAI;AAAA,UACF,OAAO,YAAY,WAAW,EAAE,UAAU,QAAQ,IAAI;AAAA,QACxD;AAAA,MACJ;AACA,YAAM,KAAK,cAAc,QAAQ,UAAU;AAC3C,aAAO;AAAA,QACL,GAAG,KAAK,GAAG,UAAU,MAAM,yBAAyB,WAAW,MAAM;AAAA,MACvE;AAEA,UAAI,OAAO,iBAAiB,QAAW;AACrC,aAAK;AAAA,UACH,OAAO;AAAA,UACP,SAAS;AAAA,UACT,OAAO;AAAA,QACT;AAAA,MACF,WAAW,CAAC,WAAW;AACrB,eAAO;AAAA,UACL,GAAG,KAAK,GAAG;AAAA,QACb;AACA,aAAK,OAAO,QAAQ,YAAY,qBAAqB;AAAA,MACvD;AACA,WAAK,OAAO,QAAQ,YAAY,oBAAoB;AACpD,aAAO;AAAA,IACT;AAAA;AAAA,EAEA,mBAAmB,SAAiB,QAAgC;AAClE,QAAI;AACF,YAAM,QAAQ,KAAK,OAAO,IAAI,OAAO;AACrC,UAAI,CAAC,OAAO;AACV,eAAO,KAAK,GAAG,KAAK,GAAG,mBAAmB,OAAO,aAAa;AAC9D;AAAA,MACF;AACA,YAAM,aAAa,MAAM;AACzB,UAAI,CAAC,YAAY;AACf,eAAO,KAAK,GAAG,KAAK,GAAG,oCAAoC,OAAO,GAAG;AACrE;AAAA,MACF;AACA,YAAM,OAAO,KAAK,MAAM,IAAI,UAAU;AACtC,UAAI,CAAC,MAAM;AACT,eAAO,KAAK,GAAG,KAAK,GAAG,kBAAkB,UAAU,aAAa;AAChE;AAAA,MACF;AACA,WAAK,OAAO,MAAM;AAClB,aAAO;AAAA,QACL,GAAG,KAAK,GAAG,+BAA+B,UAAU,gBAAgB,MAAM;AAAA,MAC5E;AAAA,IACF,SAAS,OAAO;AACd,aAAO;AAAA,QACL,GAAG,KAAK,GAAG,6CAA6C,OAAO,KAAM,MAAgB,OAAO;AAAA,MAC9F;AAAA,IACF;AAAA,EACF;AAAA,EAEQ,OAAO,QAAgB,QAAgC;AAC7D,UAAM,OAAO,KAAK,MAAM,IAAI,MAAM;AAClC,QAAI,MAAM;AACR,WAAK,OAAO,MAAM;AAAA,IACpB,OAAO;AACL,aAAO,KAAK,GAAG,KAAK,GAAG,oCAAoC,MAAM,EAAE;AAAA,IACrE;AAAA,EACF;AAAA;AAAA,EAGM,cACJ,QACA,YACe;AAAA;AACf,YAAM,OAAO,KAAK,MAAM,IAAI,MAAM;AAClC,UAAI,MAAM;AACR,aAAK,YAAY,UAAU;AAC3B,eAAO,KAAK,GAAG,KAAK,GAAG,8BAA8B,MAAM,GAAG;AAAA,MAChE,OAAO;AACL,eAAO,KAAK,GAAG,KAAK,GAAG,UAAU,MAAM,aAAa;AAAA,MACtD;AAAA,IACF;AAAA;AAAA,EAEc,WAAW,QAA+B;AAAA;AACtD,UAAI,KAAK,MAAM,IAAI,MAAM,GAAG;AAC1B,aAAK,MAAM,OAAO,MAAM;AACxB,eAAO,KAAK,GAAG,KAAK,GAAG,UAAU,MAAM,WAAW;AAAA,MACpD,OAAO;AACL,eAAO,KAAK,GAAG,KAAK,GAAG,UAAU,MAAM,aAAa;AAAA,MACtD;AAAA,IACF;AAAA;AAAA,EAEc,UAAU,QAA+B;AAAA;AACrD,YAAM,OAAO,KAAK,MAAM,IAAI,MAAM;AAClC,UAAI,MAAM;AACR,aAAK,aAAa,YAAY,WAAW;AACzC,eAAO,KAAK,GAAG,KAAK,GAAG,UAAU,MAAM,UAAU;AAAA,MACnD,OAAO;AACL,eAAO,KAAK,GAAG,KAAK,GAAG,UAAU,MAAM,aAAa;AAAA,MACtD;AAAA,IACF;AAAA;AAAA,EAEc,UAAU,QAAgB,OAA8B;AAAA;AACpE,YAAM,OAAO,KAAK,MAAM,IAAI,MAAM;AAClC,UAAI,MAAM;AACR,aAAK,SAAS,KAAK;AACnB,eAAO,KAAK,GAAG,KAAK,GAAG,UAAU,MAAM,eAAe,KAAK,MAAM;AAAA,MACnE,OAAO;AACL,eAAO,KAAK,GAAG,KAAK,GAAG,UAAU,MAAM,aAAa;AAAA,MACtD;AAAA,IACF;AAAA;AAAA,EAEA,YAAY,QAA6B;AA7R3C;AA8RI,UAAM,YAAY,KAAK,IAAI;AAC3B,UAAM,UAAU,GAAG,KAAK,GAAG,IAAI,SAAS,QAAI,gCAAW,EAAE,MAAM,GAAG,CAAC,CAAC;AACpE,UAAM,WAA0B;AAAA,MAC9B;AAAA,IACF;AACA,SAAK,OAAO,IAAI,SAAS,QAAQ;AACjC,UAAM,kBAAiB,YAAO,CAAC,MAAR,mBAAW;AAClC,WAAO,QAAQ,CAAC,OAAmB,UAAkB;AACnD,YAAM,QAAQ;AACd,YAAM,iBAAiB;AAAA,IACzB,CAAC;AACD,WAAO,OAAO,GAAG,KAAK,GAAG,WAAW,OAAO,0BAA0B;AACrE,WAAO;AAAA,EACT;AAAA;AAAA,EAGQ,YAAY,QAA6B;AAC/C,QAAI,OAAO,WAAW,KAAK,CAAC,OAAO,CAAC,EAAE,SAAS;AAC7C,YAAM,IAAI,MAAM,6BAA6B;AAAA,IAC/C;AACA,UAAM,UAAU,OAAO,CAAC,EAAE;AAC1B,QAAI,WAAW,KAAK,OAAO,IAAI,OAAO;AAEtC,QAAI,UAAU;AACZ,eAAS,SAAS,SAAS,OAAO,OAAO,MAAM;AAC/C,aAAO;AAAA,QACL,GAAG,KAAK,GAAG,WAAW,OAAO,iBAAiB,OAAO,MAAM;AAAA,MAC7D;AAAA,IACF,OAAO;AACL,iBAAW;AAAA,QACT;AAAA,MACF;AACA,WAAK,OAAO,IAAI,SAAS,QAAQ;AACjC,aAAO;AAAA,QACL,GAAG,KAAK,GAAG,WAAW,OAAO,iBAAiB,OAAO,MAAM;AAAA,MAC7D;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EAEc,wBAAwB,QAAmC;AAAA;AACvE,YAAM,uBAAuB,OAAO;AACpC,UAAI,CAAC,sBAAsB;AACzB,cAAM,IAAI;AAAA,UACR,GAAG,KAAK,GAAG,sCAAsC,OAAO,OAAO;AAAA,QACjE;AAAA,MACF;AACA,YAAM,aAAa,gBAAgB,gBAAgB;AACnD,iBAAW,wBAAwB,OAAO,SAAS,oBAAoB;AAAA,IACzE;AAAA;AAAA,EAEM,yBAAyB,SAAgC;AAAA;AAC7D,aAAO;AAAA,QACL,GAAG,KAAK,GAAG,4BAA4B,OAAO;AAAA,MAChD;AACA,YAAM,QAAQ,KAAK,OAAO,IAAI,OAAO;AACrC,UAAI,CAAC,OAAO;AACV,cAAM,IAAI,MAAM,GAAG,KAAK,GAAG,WAAW,OAAO,YAAY;AAAA,MAC3D;AACA,YAAM,cAA2B,MAAM;AACvC,YAAM,eAA6B,YAAY;AAAA,QAC7C,CAAC,WAAW,OAAO,aAAa;AAAA,MAClC;AACA,YAAM,gBAA8B,YAAY;AAAA,QAC9C,CAAC,WAAW,OAAO,aAAa;AAAA,MAClC;AAEA,UAAI,aAAa,SAAS,GAAG;AAC3B,cAAM,aAAa,MAAM,KAAK;AAAA,UAC5B,iCAAK,aAAa,CAAC,IAAnB,EAAsB,QAAQ;AAAA,UAC9B;AAAA,QACF;AACA,cAAM,aAAa;AAEnB,YAAI,aAAa;AACjB,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,gBAAM,gBAAgB,MAAM,KAAK;AAAA,YAC/B,iCACK,aAAa,CAAC,IADnB;AAAA,cAEE;AAAA,YACF;AAAA,YACA;AAAA,UACF;AACA,gBAAM,WAAW,KAAK,MAAM,IAAI,UAAU;AAC1C,cAAI,UAAU;AACZ,qBAAS,gBAAgB,eAAe,SAAS,KAAK;AAAA,UACxD;AACA,uBAAa;AAAA,QACf;AAGA,YAAI,cAAc,SAAS,KAAK,cAAc,CAAC,EAAE,SAAS,SAAS,GAAG;AACpE,gBAAM,gBAAgB,KAAK,MAAM,IAAI,UAAU;AAC/C,cAAI,eAAe;AACjB,kBAAM,cAAc,cAAc,CAAC,EAAE,SAAS,CAAC;AAC/C,0BAAc;AAAA,cACZ,OAAO,gBAAgB,WACnB,cACA,YAAY;AAAA,cAChB,SAAS;AAAA,cACT,OAAO,gBAAgB,WAAW,SAAS,YAAY;AAAA,YACzD;AAAA,UACF;AAAA,QACF;AAAA,MACF,OAAO;AACL,eAAO;AAAA,UACL,GAAG,KAAK,GAAG,qCAAqC,OAAO;AAAA,QACzD;AAAA,MACF;AAEA,UAAI,cAAc,SAAS,GAAG;AAC5B,cAAM,uBAAqC,cAAc;AAAA,UACvD,CAAC,QAAQ,UAAU;AA9Y3B;AA+YU,kBAAM,cACJ,mBAAc,QAAQ,CAAC,MAAvB,mBAA0B,SAAS;AACrC,kBAAM,aAAyB,iCAC1B,SAD0B;AAAA,cAE7B,cAAc,aACV,OAAO,eAAe,WACpB,aACA,WAAW,WACb;AAAA,cACJ,UACE,cAAc,OAAO,eAAe,WAChC,WAAW,OACX;AAAA,YACR;AACA,mBAAO;AAAA,UACT;AAAA,QACF;AACA,cAAM,KAAK,yBAAyB,SAAS,oBAAoB;AAAA,MACnE;AAAA,IACF;AAAA;AAAA,EAEM,yBACJ,SACA,eACe;AAAA;AACf,YAAM,UAAgC;AAAA,QACpC,QAAQ,WAAW;AAAA,QACnB,OAAO;AAAA,UACL,IAAI;AAAA,UACJ,QAAQ;AAAA,QACV;AAAA,MACF;AAEA,UAAI;AACF,cAAM,KAAK,uBAAuB,OAAO;AACzC,eAAO;AAAA,UACL,GAAG,KAAK,GAAG,oDAAoD,OAAO;AAAA,QACxE;AAAA,MACF,SAAS,OAAO;AACd,eAAO;AAAA,UACL,GAAG,KAAK,GAAG,+CAA+C,KAAK;AAAA,QACjE;AAAA,MACF;AAAA,IACF;AAAA;AAAA,EAEM,WAAW,SAAiB,MAAmC;AAAA;AACnE,aAAO,OAAO,SAAS,OAAO,eAAe;AAC7C,YAAM,QAAQ,KAAK,OAAO,IAAI,OAAO;AACrC,UAAI,CAAC,OAAO;AACV,eAAO,KAAK,SAAS,OAAO,aAAa;AACzC;AAAA,MACF;AACA,YAAM,aAAa,MAAM;AACzB,UAAI,CAAC,YAAY;AACf,eAAO,MAAM,GAAG,KAAK,GAAG,4BAA4B,OAAO,aAAa;AACxE;AAAA,MACF;AAEA,YAAM,WAAW,KAAK,MAAM,IAAI,UAAU;AAE1C,UAAI,CAAC,UAAU;AACb,eAAO;AAAA,UACL,GAAG,KAAK,GAAG,eAAe,UAAU,cAAc,OAAO;AAAA,QAC3D;AACA;AAAA,MACF;AAEA,UAAI;AACF,cAAM,KAAK,QAAQ,YAAY,IAAI;AACnC,eAAO;AAAA,UACL,GAAG,KAAK,GAAG,WAAW,OAAO,2BAA2B,UAAU;AAAA,QACpE;AAAA,MACF,SAAS,OAAO;AACd,eAAO,MAAM,GAAG,KAAK,GAAG,2BAA2B,OAAO,KAAK,KAAK,EAAE;AAAA,MACxE;AAAA,IACF;AAAA;AAAA,EAEc,QAAQ,QAAgB,MAAmC;AAAA;AACvE,YAAM,OAAO,KAAK,MAAM,IAAI,MAAM;AAClC,UAAI,MAAM;AACR,cAAM,KAAK,QAAQ,IAAI;AAAA,MACzB,OAAO;AACL,eAAO,KAAK,GAAG,KAAK,GAAG,UAAU,MAAM,aAAa;AAAA,MACtD;AAAA,IACF;AAAA;AAAA,EAEM,kBAAkB,SAAyC;AAAA;AAC/D,UAAI;AACF,cAAM,EAAE,UAAU,SAAS,KAAK,IAAI;AACpC,eAAO,KAAK,yCAAyC,QAAQ,EAAE;AAC/D,YAAI,YAAY,QAAW;AACzB,gBAAM,IAAI,MAAM,sBAAsB;AAAA,QACxC;AACA,YAAI,aAAa,QAAW;AAC1B,gBAAM,IAAI,MAAM,uBAAuB;AAAA,QACzC;AACA,cAAM,OAAO,KAAK,0BAA0B,UAAU,OAAO;AAC7D,YAAI,CAAC,QAAQ,KAAK,WAAW,GAAG;AAC9B,gBAAM,IAAI;AAAA,YACR,8BAA8B,QAAQ,gBAAgB,OAAO;AAAA,UAC/D;AAAA,QACF;AACA,cAAM,SAAS,KAAK,CAAC,EAAE,MAAM;AAC7B,YAAI,WAAW,QAAW;AACxB,gBAAM,IAAI;AAAA,YACR,kCAAkC,QAAQ,gBAAgB,OAAO;AAAA,UACnE;AAAA,QACF;AACA,cAAM,KAAK,cAAc;AAAA,UACvB,QAAQ,WAAW;AAAA,UACnB,IAAI;AAAA,UACJ;AAAA,QACF,CAAC;AAAA,MACH,SAAS,OAAO;AACd,eAAO,MAAM,+BAAgC,MAAgB,OAAO,EAAE;AAAA,MACxE;AAAA,IACF;AAAA;AAAA,EAEc,aAAa,QAA+B;AAAA;AACxD,YAAM,OAAO,KAAK,MAAM,IAAI,MAAM;AAClC,UAAI,MAAM;AACR,YAAI;AACF,gBAAM,KAAK,SAAS;AAAA,QACtB,SAAS,KAAK;AACZ,gBAAM,QAAQ;AACd,iBAAO;AAAA,YACL,GAAG,KAAK,GAAG,UAAU,MAAM,sBAAsB,MAAM,OAAO;AAAA,UAChE;AAAA,QACF;AAAA,MACF,OAAO;AACL,eAAO,KAAK,GAAG,KAAK,GAAG,UAAU,MAAM,aAAa;AAAA,MACtD;AAAA,IACF;AAAA;AAAA,EAEA,WAA8B;AAC5B,WAAO,KAAK;AAAA,EACd;AAAA;AAAA,EAGA,0BAA0B,YAAoB,SAAyB;AACrE,WAAO,MAAM,KAAK,KAAK,MAAM,OAAO,CAAC,EAAE,OAAO,CAAC,SAAS;AACtD,YAAM,aAAa,KAAK,UAAU;AAClC,UAAI,CAAC,YAAY;AACf,eAAO;AAAA,MACT;AACA,aACE,WAAW,YAAY,WACvB,WAAW,SAAS;AAAA,QAAK,CAAC,YACxB,OAAO,YAAY,WACf,YAAY,aACZ,QAAQ,aAAa;AAAA,MAC3B;AAAA,IAEJ,CAAC;AAAA,EACH;AACF;;;ACxiBO,IAAM,uBAAN,MAA2B;AAAA,EAIhC,YACE,WAAiC,gBAAgB,OACjD,uBACA;AACA,SAAK,WAAW;AAChB,SAAK,wBAAwB;AAAA,EAC/B;AAAA,EAEQ,MAAM,UAAwC;AACpD,WAAO,SAAS,KAAK;AAAA,EACvB;AAAA,EAEQ,MAAM,UAAwC;AACpD,UAAM,aAAa,KAAK,MAAM,QAAQ;AACtC,QAAI,MAAM,QAAQ,UAAU,GAAG;AAC7B,aAAO,MAAM,KAAK,IAAI,IAAI,UAAU,CAAC;AAAA,IACvC;AACA,UAAM,IAAI,MAAM,gCAAgC;AAAA,EAClD;AAAA,EAEA,cAAc,UAAwC;AACpD,YAAQ,KAAK,UAAU;AAAA,MACrB,KAAK,gBAAgB;AACnB,eAAO,KAAK,MAAM,QAAQ;AAAA,MAC5B,KAAK,gBAAgB;AACnB,eAAO,KAAK,MAAM,QAAQ;AAAA,MAC5B,KAAK,gBAAgB;AACnB,YAAI,KAAK,uBAAuB;AAC9B,iBAAO,KAAK,sBAAsB,QAAQ;AAAA,QAC5C;AACA,cAAM,IAAI,MAAM,yCAAyC;AAAA,MAC3D;AACE,cAAM,IAAI,MAAM,6BAA6B,KAAK,QAAQ,EAAE;AAAA,IAChE;AAAA,EACF;AAAA,EAEA,YAAY,UAAsC;AAChD,SAAK,WAAW;AAAA,EAClB;AAAA,EAEA,yBAAyB,iBAAwC;AAC/D,SAAK,wBAAwB;AAAA,EAC/B;AACF;;;ACjDA,oBAAuB;AACvB,WAAsB;AACtB,YAAuB;AAEhB,IAAM,OAAO,CAAO,KAAU,SAAkC;AACrE,QAAM,SAAS,IAAI,aAAa;AAChC,QAAM,UAAU;AAAA,IACd,UAAU,IAAI;AAAA,IACd,MAAM,IAAI,SAAS,SAAS,QAAQ;AAAA,IACpC,MAAM,IAAI;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,MACP,gBAAgB;AAAA,MAChB,kBAAkB,qBAAO,WAAW,IAAI;AAAA,IAC1C;AAAA,EACF;AAEA,SAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAM,OAAO,SAAS,QAAQ,MAAM,QAAQ,SAAS,CAAC,QAAQ;AAC5D,UAAIC,QAAO;AACX,UAAI,GAAG,QAAQ,CAAC,UAAU;AACxB,QAAAA,SAAQ;AAAA,MACV,CAAC;AAED,UAAI,GAAG,OAAO,MAAM;AAClB,YAAI,IAAI,cAAc,IAAI,cAAc,OAAO,IAAI,aAAa,KAAK;AACnE,kBAAQA,KAAI;AAAA,QACd,OAAO;AACL;AAAA,YACE,IAAI;AAAA,cACF,eAAe,IAAI,UAAU,IAAI,IAAI,aAAa,WAAW,QAAQ,QAAQ,GAAG,QAAQ,IAAI;AAAA,YAC9F;AAAA,UACF;AAAA,QACF;AAAA,MACF,CAAC;AAAA,IACH,CAAC;AAED,QAAI,GAAG,SAAS,CAAC,UAAU;AACzB,aAAO,IAAI,MAAM,qBAAqB,IAAI,IAAI,KAAK,MAAM,OAAO,EAAE,CAAC;AAAA,IACrE,CAAC;AAED,QAAI,MAAM,IAAI;AACd,QAAI,IAAI;AAAA,EACV,CAAC;AACH;;;ACtBO,IAAM,yBAAyB,CACpC,YACkB;AAClB,QAAM,EAAE,SAAS,cAAc,KAAK,IAAI;AACxC,SAAO,KAAK,sBAAsB,KAAK,UAAU,SAAS,MAAM,CAAC,CAAC,EAAE;AACpE,QAAM,eAA4B,QAAQ,MAAM;AAChD,QAAM,UAAkB,QAAQ,MAAM;AAEtC,aAAW,UAAU,cAAc;AACjC,QAAI,OAAO,SAAS,WAAW,GAAG;AAChC,aAAO,KAAK,4CAA4C;AACxD;AAAA,IACF;AACA,UAAM,UAAU,OAAO,SAAS,CAAC;AACjC,UAAM,WACJ,OAAO,YAAY,WAAW,UAAU,QAAQ;AAClD,UAAM,OAAO,OAAO,YAAY,WAAW,SAAY,QAAQ;AAE/D,UAAM,OAAO,aAAa,UAAU,IAAI;AACxC,QAAI,CAAC,MAAM;AACT,aAAO,KAAK,4CAA4C,QAAQ,EAAE;AAClE;AAAA,IACF;AACA,QAAI;AAEF,YAAM,OAAO,KAAK,UAAU;AAAA,QAC1B;AAAA,QACA,eAAe;AAAA,MACjB,CAAC;AACD,YAAM,MAAM,IAAI,IAAI,MAAM,IAAI;AAC9B,WAAK,KAAK,KAAK,IAAI;AAAA,IACrB,SAAS,OAAO;AACd,aAAO;AAAA,QACL,6CAA6C,IAAI,iBAAiB,QAAQ,KAAM,MAAgB,OAAO;AAAA,MACzG;AAAA,IACF;AAAA,EACF;AACF;AAQO,IAAM,wBAAwB,CAAO,YAAwB;AAClE,QAAM,EAAE,WAAW,cAAc,KAAK,IAAI;AAC1C,SAAO,KAAK,6BAA6B,KAAK,UAAU,SAAS,MAAM,CAAC,CAAC,EAAE;AAC3E,MAAI;AACF,QAAI,CAAC,UAAU,SAAS;AACtB,YAAM,IAAI,MAAM,8BAA8B;AAAA,IAChD;AAEA,UAAM,mBAAmB,aAAa,UAAU,UAAU,UAAU,IAAI;AACxE,QAAI,CAAC,kBAAkB;AACrB,YAAM,IAAI;AAAA,QACR,kEAAkE,UAAU,QAAQ;AAAA,MACtF;AAAA,IACF;AAEA,UAAM,MAAM,IAAI,IAAI,MAAM,gBAAgB;AAC1C,WAAO,KAAK,sCAAsC,IAAI,IAAI,EAAE;AAC5D,UAAM,OAAO,KAAK,UAAU,SAAS;AACrC,UAAM,KAAK,KAAK,IAAI;AAAA,EACtB,SAAS,OAAO;AACd,WAAO;AAAA,MACL,yCAA0C,MAAgB,OAAO;AAAA,IACnE;AACA,UAAM;AAAA,EACR;AACF;AAOO,IAAM,uBAAuB,CAClC,cACkB;AAClB,QAAM,EAAE,YAAY,OAAO,aAAa,IAAI;AAE5C,aAAW;AAAA,IACT,CAAO,YAAiD;AACtD,YAAM,UAAsB;AAAA,QAC1B;AAAA,QACA;AAAA,QACA,MAAM,MAAM;AAAA,MACd;AACA,YAAM,uBAAuB,OAAO;AAAA,IACtC;AAAA,EACF;AAEA,aAAW;AAAA,IACT,CAAO,cAA8C;AACnD,YAAM,UAAsB;AAAA,QAC1B;AAAA,QACA;AAAA,QACA,MAAM,MAAM;AAAA,MACd;AACA,YAAM,sBAAsB,OAAO;AAAA,IACrC;AAAA,EACF;AACF;;;ACjGO,IAAM,oBAAoB,CAAO,YAAsC;AAC5E,SAAO,KAAK,KAAK,UAAU,SAAS,MAAM,CAAC,CAAC;AAC5C,QAAM,EAAE,SAAS,oBAAoB,IAAI;AACzC,QAAM,oBAAoB,OAAO;AACnC;AAQA,IAAM,4BAA4B,CAChC,YACgC;AAChC,MAAI;AACF,UAAM,aAAa,gBAAgB,gBAAgB;AACnD,UAAM,iBAAiB,WAAW,wBAAwB,OAAO;AACjE,QAAI,mBAAmB,QAAW;AAChC,aAAO,KAAK;AAAA,QACV,SAAS,kCAAkC,cAAc;AAAA,MAC3D,CAAC;AACD,aAAO;AAAA,IACT,MAAO,OAAM,IAAI,MAAM,sBAAsB;AAAA,EAC/C,SAAS,OAAO;AACd,WAAO,MAAM,EAAE,SAAU,MAAgB,QAAQ,CAAC;AAAA,EACpD;AACF;AAEA,IAAM,6BAA6B,CACjC,YACkB;AAClB,QAAM,EAAE,SAAS,MAAM,mBAAmB,IAAI;AAC9C,QAAM,iBAAiB,MAAM,mBAAmB,QAAQ,OAAO;AAC/D,QAAM,MAAM,IAAI,IAAI,MAAM,cAAc;AACxC,QAAM,OAAO,KAAK,UAAU,OAAO;AACnC,SAAO,KAAK,gBAAgB,GAAG,KAAK,KAAK,UAAU,MAAM,MAAM,CAAC,CAAC,EAAE;AACnE,QAAM,KAAK,KAAK,IAAI;AACtB;AAEO,IAAM,yBAAyB,CACpC,cACkB;AAClB,QAAM,EAAE,YAAY,OAAO,qBAAqB,mBAAmB,IACjE;AAEF,aAAW;AAAA,IACT,CAAO,YAA6C;AAClD,YAAM,UAAqB;AAAA,QACzB;AAAA,QACA;AAAA,MACF;AACA,YAAM,kBAAkB,OAAO;AAAA,IACjC;AAAA,EACF;AAEA,aAAW;AAAA,IACT,CAAO,YAAsD;AAC3D,YAAM,UAAsB;AAAA,QAC1B;AAAA,QACA,MAAM,MAAM;AAAA,QACZ,oBAAoB,kDAAsB;AAAA,MAC5C;AACA,YAAM,2BAA2B,OAAO;AAAA,IAC1C;AAAA,EACF;AACF;","names":["DefaultCallback","NodeType","DataType","CombineStrategy","ChainType","ChainStatus","NodeSignal","import_node_crypto","EventEmitter","reportingCallback","broadcastReportingCallback","import_node_crypto","remoteServiceCallback","broadcastSetupCallback","broadcastReportingCallback","reportingCallback","data"]}