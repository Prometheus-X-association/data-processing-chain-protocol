{"version":3,"sources":["../src/types/types.ts","../src/core/Node.ts","../src/libs/Logger.ts","../src/core/PipelineProcessor.ts","../src/core/NodeSupervisor.ts","../src/core/NodeMonitoring.ts","../src/core/ProgressTracker.ts","../src/core/PipelineDataCombiner.ts","../src/extra/DefaultCallbacks.ts"],"sourcesContent":["import { PipelineProcessor } from '../core/PipelineProcessor';\r\n\r\nexport type ProcessorPipeline = PipelineProcessor[];\r\n\r\n// Todo: review\r\nexport type PipelineData = unknown;\r\n\r\nexport interface CallbackPayload {\r\n  chainId?: string;\r\n  targetId: string;\r\n  data: unknown;\r\n}\r\nexport type Callback = (_payload: CallbackPayload) => void;\r\nexport type SetupCallback = (_message: BrodcastMessage) => Promise<void>;\r\nexport type ProcessorCallback = (\r\n  _payload: CallbackPayload,\r\n) => Promise<PipelineData>;\r\n\r\nexport namespace NodeType {\r\n  export type Type = 'local' | 'remote';\r\n  export const LOCAL: Type = 'local';\r\n  export const REMOTE: Type = 'remote';\r\n}\r\n\r\nexport namespace DataType {\r\n  export type Type = 'raw' | 'compressed';\r\n  export const RAW: Type = 'raw';\r\n  export const COMPRESSED: Type = 'compressed';\r\n}\r\n\r\nexport namespace CombineStrategy {\r\n  export type Type = 'merge' | 'union' | 'custom';\r\n  export const MERGE: Type = 'merge';\r\n  export const UNION: Type = 'union';\r\n  export const CUSTOM: Type = 'custom';\r\n}\r\n\r\nexport type CombineFonction = (_dataSets: PipelineData[]) => unknown[];\r\n\r\nexport interface ChainState {\r\n  completed: string[];\r\n  pending: string[];\r\n  failed: string[];\r\n}\r\n\r\nexport namespace ChainType {\r\n  export type Type = 0b0000010 | 0b00000001;\r\n  export const PERSISTANT: Type = 0b00000010;\r\n  export const DEFAULT: Type = 0b00000001;\r\n}\r\n\r\nexport namespace NodeStatus {\r\n  export type Type =\r\n    | 'pending'\r\n    | 'in-progress' // running\r\n    | 'completed'\r\n    | 'failed'\r\n    | 'paused';\r\n  export const PAUSED: Type = 'paused';\r\n  export const PENDING: Type = 'pending';\r\n  export const IN_PROGRESS: Type = 'in-progress';\r\n  export const COMPLETED: Type = 'completed';\r\n  export const FAILED: Type = 'failed';\r\n}\r\n\r\nexport namespace NodeSignal {\r\n  export type Type =\r\n    | 'node_setup'\r\n    | 'node_create'\r\n    | 'node_delete'\r\n    | 'node_pause'\r\n    | 'node_delay'\r\n    | 'node_run'\r\n    | 'node_send_data'\r\n    | 'chain_prepare'\r\n    | 'chain_start'\r\n    | 'chain_deploy';\r\n  export const NODE_SETUP: Type = 'node_setup';\r\n  export const NODE_CREATE: Type = 'node_create';\r\n  export const NODE_DELETE: Type = 'node_delete';\r\n  export const NODE_PAUSE: Type = 'node_pause';\r\n  export const NODE_DELAY: Type = 'node_delay';\r\n  export const NODE_RUN: Type = 'node_run';\r\n  export const NODE_SEND_DATA: Type = 'node_send_data';\r\n  export const CHAIN_PREPARE: Type = 'chain_prepare';\r\n  export const CHAIN_START: Type = 'chain_start';\r\n  export const CHAIN_DEPLOY: Type = 'chain_deploy';\r\n}\r\n\r\nexport type SupervisorPayloadSetup = {\r\n  signal: typeof NodeSignal.NODE_SETUP;\r\n  config: NodeConfig;\r\n};\r\n\r\nexport type SupervisorPayloadCreate = {\r\n  signal: typeof NodeSignal.NODE_CREATE;\r\n  params: NodeConfig;\r\n};\r\n\r\nexport type SupervisorPayloadDelete = {\r\n  signal: typeof NodeSignal.NODE_DELETE;\r\n  id: string;\r\n};\r\n\r\nexport type SupervisorPayloadPause = {\r\n  signal: typeof NodeSignal.NODE_PAUSE;\r\n  id: string;\r\n};\r\n\r\nexport type SupervisorPayloadDelay = {\r\n  signal: typeof NodeSignal.NODE_DELAY;\r\n  id: string;\r\n  delay: number;\r\n};\r\n\r\nexport type SupervisorPayloadRun = {\r\n  signal: typeof NodeSignal.NODE_RUN;\r\n  id: string;\r\n  data: PipelineData;\r\n};\r\n\r\nexport type SupervisorPayloadSendData = {\r\n  signal: typeof NodeSignal.NODE_SEND_DATA;\r\n  id: string;\r\n};\r\n\r\nexport type SupervisorPayloadPrepareChain = {\r\n  signal: typeof NodeSignal.CHAIN_PREPARE;\r\n  id: string;\r\n};\r\n\r\nexport type SupervisorPayloadStartChain = {\r\n  signal: typeof NodeSignal.CHAIN_START;\r\n  id: string;\r\n  data: PipelineData;\r\n};\r\n\r\nexport type SupervisorPayloadDeployChain = {\r\n  signal: typeof NodeSignal.CHAIN_DEPLOY;\r\n  config: ChainConfig;\r\n  data: PipelineData;\r\n};\r\n\r\nexport type SupervisorPayload =\r\n  | SupervisorPayloadSetup\r\n  | SupervisorPayloadCreate\r\n  | SupervisorPayloadDelete\r\n  | SupervisorPayloadPause\r\n  | SupervisorPayloadDelay\r\n  | SupervisorPayloadRun\r\n  | SupervisorPayloadSendData\r\n  | SupervisorPayloadPrepareChain\r\n  | SupervisorPayloadStartChain\r\n  | SupervisorPayloadDeployChain;\r\n\r\nexport type NodeConfig = {\r\n  services: string[];\r\n  chainId?: string;\r\n  location?: NodeType.Type;\r\n  nextTargetId?: string;\r\n  chainType?: ChainType.Type;\r\n};\r\n\r\nexport type ChainConfig = NodeConfig[];\r\nexport interface BrodcastMessage {\r\n  signal: NodeSignal.Type;\r\n  chain: {\r\n    id: string;\r\n    config: ChainConfig;\r\n  };\r\n}\r\n\r\nexport interface ChainRelation {\r\n  rootNodeId?: string;\r\n  config: ChainConfig;\r\n}\r\n","import {\r\n  DataType,\r\n  NodeStatus,\r\n  PipelineData,\r\n  ProcessorPipeline,\r\n  NodeType,\r\n  NodeSignal,\r\n  NodeConfig,\r\n  ChainType,\r\n} from '../types/types';\r\nimport { setTimeout, setImmediate } from 'timers';\r\nimport { randomUUID } from 'node:crypto';\r\nimport { Logger } from '../libs/Logger';\r\nimport { NodeSupervisor } from './NodeSupervisor';\r\n\r\nexport class Node {\r\n  private id: string;\r\n  private pipelines: ProcessorPipeline[];\r\n  // Todo:\r\n  private dependencies: string[];\r\n  private status: NodeStatus.Type;\r\n  private error?: Error;\r\n  private delay: number;\r\n  private progress: number;\r\n  private dataType: DataType.Type;\r\n  private executionQueue: Promise<void>;\r\n  private output: PipelineData[];\r\n  private nextNodeInfo: { id: string; type: NodeType.Type } | null;\r\n  private config: NodeConfig | null;\r\n\r\n  constructor(dependencies: string[] = []) {\r\n    this.id = randomUUID();\r\n    this.output = [];\r\n    this.pipelines = [];\r\n    this.dependencies = dependencies;\r\n    this.status = NodeStatus.PENDING;\r\n    this.delay = 0;\r\n    this.progress = 0;\r\n    this.dataType = DataType.RAW;\r\n    this.executionQueue = Promise.resolve();\r\n    this.nextNodeInfo = null;\r\n    this.config = null;\r\n  }\r\n\r\n  private updateProgress(): void {\r\n    this.progress += 1 / this.pipelines.length;\r\n  }\r\n\r\n  setConfig(config: NodeConfig): void {\r\n    this.config = config;\r\n  }\r\n\r\n  getExecutionQueue(): Promise<void> {\r\n    return this.executionQueue;\r\n  }\r\n  getConfig(): NodeConfig | null {\r\n    return this.config;\r\n  }\r\n\r\n  getId(): string {\r\n    return this.id;\r\n  }\r\n\r\n  addPipeline(pipeline: ProcessorPipeline): void {\r\n    this.pipelines.push(pipeline);\r\n  }\r\n\r\n  // digest the data through successive processing stages\r\n  private async processPipeline(\r\n    pipeline: ProcessorPipeline,\r\n    data: PipelineData,\r\n  ): Promise<PipelineData> {\r\n    let result = data;\r\n    for (const processor of pipeline) {\r\n      result = await processor.digest(result);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private *getPipelineGenerator(\r\n    pipelines: ProcessorPipeline[],\r\n    count: number,\r\n  ): Generator<ProcessorPipeline[], void, unknown> {\r\n    for (let i = 0; i < pipelines.length; i += count) {\r\n      yield pipelines.slice(i, i + count);\r\n    }\r\n  }\r\n\r\n  async execute(data: PipelineData): Promise<void> {\r\n    this.executionQueue = this.executionQueue.then(async () => {\r\n      try {\r\n        this.updateStatus(NodeStatus.IN_PROGRESS);\r\n        // todo: monitor this step\r\n        if (this.delay > 0) {\r\n          await this.sleep(this.delay);\r\n        }\r\n\r\n        const generator = this.getPipelineGenerator(this.pipelines, 3);\r\n\r\n        for (const pipelineBatch of generator) {\r\n          await new Promise<void>((resolve, reject) => {\r\n            setImmediate(async () => {\r\n              try {\r\n                const batchPromises = pipelineBatch.map((pipeline) =>\r\n                  this.processPipeline(pipeline, data).then(\r\n                    (pipelineData: PipelineData) => {\r\n                      this.output.push(pipelineData);\r\n                      this.updateProgress();\r\n                      // todo: monitor this step\r\n                    },\r\n                  ),\r\n                );\r\n                await Promise.all(batchPromises);\r\n                resolve();\r\n              } catch (error) {\r\n                reject(error);\r\n              }\r\n            });\r\n          });\r\n        }\r\n\r\n        this.updateStatus(NodeStatus.COMPLETED);\r\n      } catch (error) {\r\n        this.updateStatus(NodeStatus.FAILED, error as Error);\r\n        Logger.error({\r\n          message: `Node ${this.id} execution failed: ${error}`,\r\n        });\r\n      }\r\n    });\r\n\r\n    const supervisor = NodeSupervisor.retrieveService();\r\n    await supervisor.handleRequest({\r\n      id: this.id,\r\n      signal: NodeSignal.NODE_SEND_DATA,\r\n    });\r\n  }\r\n\r\n  // ...\r\n  async sendData(): Promise<void> {\r\n    // make sure the queue has finished\r\n    await this.executionQueue;\r\n    Logger.info({ message: `Sending data from node ${this.id}.` });\r\n    await Node.terminate(this.id, this.output);\r\n  }\r\n\r\n  private static async terminate(nodeId: string, pipelineData: PipelineData[]) {\r\n    // todo: format data\r\n    const data = pipelineData[0]; // tmp\r\n    await Node.moveToNextNode(nodeId, data);\r\n  }\r\n\r\n  private static async moveToNextNode(\r\n    nodeId: string,\r\n    pipelineData: PipelineData,\r\n  ) {\r\n    const supervisor = NodeSupervisor.retrieveService();\r\n    const nodes = supervisor.getNodes();\r\n    const currentNode = nodes.get(nodeId);\r\n    if (!currentNode) {\r\n      Logger.warn({\r\n        message: `Node ${nodeId} not found for moving to next node.`,\r\n      });\r\n      return;\r\n    }\r\n    const nextNodeInfo = currentNode.getNextNodeInfo();\r\n    if (nextNodeInfo) {\r\n      if (nextNodeInfo.type === NodeType.LOCAL) {\r\n        await supervisor.handleRequest({\r\n          id: nextNodeInfo.id,\r\n          data: pipelineData,\r\n          signal: NodeSignal.NODE_RUN,\r\n        });\r\n      } else if (nextNodeInfo.type === NodeType.REMOTE) {\r\n        supervisor.remoteServiceCallback({\r\n          // nextNodeInfo.id needs to be the next remote target service uid\r\n          chainId: currentNode.getConfig()?.chainId,\r\n          targetId: nextNodeInfo.id,\r\n          data: pipelineData,\r\n        });\r\n      }\r\n    } else {\r\n      Logger.info({ message: `End of pipeline reached by node ${nodeId}.` });\r\n    }\r\n    const isPersistant =\r\n      (currentNode.config?.chainType ?? 0) & ChainType.PERSISTANT;\r\n    if (!isPersistant) {\r\n      await supervisor.handleRequest({\r\n        id: nodeId,\r\n        signal: NodeSignal.NODE_DELETE,\r\n      });\r\n    } else {\r\n      Logger.warn({\r\n        message: `Node ${nodeId} kept for future calls.`,\r\n      });\r\n    }\r\n  }\r\n\r\n  getProgress(): number {\r\n    return this.progress;\r\n  }\r\n\r\n  canExecute(executedNodes: Set<string>): boolean {\r\n    return this.dependencies.every((dep) => executedNodes.has(dep));\r\n  }\r\n\r\n  setDelay(delay: number): void {\r\n    this.delay = delay;\r\n  }\r\n\r\n  private sleep(ms: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  getDataType(): DataType.Type {\r\n    return this.dataType;\r\n  }\r\n\r\n  getStatus(): NodeStatus.Type {\r\n    return this.status;\r\n  }\r\n\r\n  getDependencies(): string[] {\r\n    return this.dependencies;\r\n  }\r\n\r\n  updateStatus(status: NodeStatus.Type, error?: Error): void {\r\n    this.status = status;\r\n    if (status === NodeStatus.FAILED) {\r\n      this.error = error;\r\n    }\r\n  }\r\n  getError(): Error | undefined {\r\n    return this.error;\r\n  }\r\n\r\n  getProcessors(): ProcessorPipeline[] {\r\n    return this.pipelines;\r\n  }\r\n\r\n  setNextNodeInfo(id: string, type: NodeType.Type): void {\r\n    this.nextNodeInfo = { id, type };\r\n  }\r\n\r\n  getNextNodeInfo(): { id: string; type: NodeType.Type } | null {\r\n    return this.nextNodeInfo;\r\n  }\r\n}\r\n","import {\r\n  createLogger,\r\n  format,\r\n  transports,\r\n  addColors,\r\n  Logger as WinstonLogger,\r\n} from 'winston';\r\nimport DailyRotateFile from 'winston-daily-rotate-file';\r\nimport path from 'path';\r\n\r\nconst LEVEL = 'level';\r\nconst PROJECT_ROOT = process.cwd();\r\nconst winstonLogsMaxFiles = '14d';\r\nconst winstonLogsMaxSize = '20m';\r\n\r\nconst levels = {\r\n  error: 0,\r\n  warn: 1,\r\n  info: 2,\r\n  http: 3,\r\n  debug: 4,\r\n  header: 5,\r\n};\r\n\r\nconst level = () => process.env.LOG_LEVEL || 'header';\r\n\r\nconst colors = {\r\n  error: 'red',\r\n  warn: 'yellow',\r\n  info: 'green',\r\n  http: 'magenta',\r\n  debug: 'blue',\r\n  header: 'cyan',\r\n};\r\n\r\naddColors(colors);\r\n\r\nconst filterOnly = (level: string) => {\r\n  return format((info) => {\r\n    if (info[LEVEL] === level) return info;\r\n    return false;\r\n  })();\r\n};\r\n\r\nconst zFormat = format.combine(\r\n  format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n  format.printf((info) => `${info.timestamp} ${info.level}: ${info.message}`),\r\n  format.json(),\r\n);\r\n\r\nconst customFormat = (level: string) => {\r\n  return format.combine(\r\n    filterOnly(level),\r\n    format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n    format.printf((info) => `${info.timestamp} ${info.level}: ${info.message}`),\r\n    format.json(),\r\n  );\r\n};\r\n\r\nconst dailyTransportOptions = (level: string) => {\r\n  return {\r\n    filename: path.join(PROJECT_ROOT, `logs/${level}/${level}_%DATE%.log`),\r\n    format: customFormat(level),\r\n    level: level,\r\n    maxFiles: winstonLogsMaxFiles,\r\n    maxSize: winstonLogsMaxSize,\r\n  } as DailyRotateFile.DailyRotateFileTransportOptions;\r\n};\r\n\r\nconst loggerTransports = [\r\n  new transports.Console({\r\n    level: level(),\r\n    format: format.combine(\r\n      format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n      format.colorize({ all: true }),\r\n      format.printf((info) => {\r\n        if (info.level.includes('header')) {\r\n          return `${info.timestamp} ${info.level}: ${info.message}`;\r\n        }\r\n        return `${info.timestamp} ${info.level}: ${info.message}`;\r\n      }),\r\n    ),\r\n  }),\r\n  new DailyRotateFile({\r\n    ...dailyTransportOptions('error'),\r\n  }),\r\n  new DailyRotateFile({\r\n    ...dailyTransportOptions('warn'),\r\n  }),\r\n  new DailyRotateFile({\r\n    ...dailyTransportOptions('http'),\r\n  }),\r\n  new DailyRotateFile({\r\n    ...dailyTransportOptions('info'),\r\n  }),\r\n  new DailyRotateFile({\r\n    maxFiles: '14d',\r\n    maxSize: '20m',\r\n    filename: path.join(PROJECT_ROOT, 'logs/all/all_%DATE%.log'),\r\n    format: format.combine(\r\n      format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),\r\n      format.printf(\r\n        (info) => `${info.timestamp} ${info.level}: ${info.message}`,\r\n      ),\r\n    ),\r\n    level: 'info',\r\n  }),\r\n  new DailyRotateFile({\r\n    ...dailyTransportOptions('header'),\r\n  }),\r\n];\r\n\r\nconst NewWinstonLogger = createLogger({\r\n  level: level(),\r\n  levels,\r\n  format: zFormat,\r\n  transports: loggerTransports,\r\n});\r\n\r\ntype LoggerOptions = {\r\n  level?: 'error' | 'warn' | 'info' | 'debug' | 'http' | 'header';\r\n  message?: string;\r\n  location?: string;\r\n  callback?: () => void;\r\n};\r\n\r\nconst DEFAULT_LOGGER_OPTIIONS: LoggerOptions = {\r\n  level: 'debug',\r\n  message: 'Log fired with no message',\r\n  location: '',\r\n  callback: () => {},\r\n};\r\n\r\nexport class Logger {\r\n  static logger: WinstonLogger = NewWinstonLogger;\r\n\r\n  static log(opts: LoggerOptions) {\r\n    const options = this.getOptions(opts);\r\n    this.doLog(options);\r\n  }\r\n\r\n  static error(opts: LoggerOptions | string) {\r\n    this.logSpecific('error', opts);\r\n  }\r\n\r\n  static warn(opts: LoggerOptions) {\r\n    this.logSpecific('warn', opts);\r\n  }\r\n\r\n  static info(opts: LoggerOptions) {\r\n    this.logSpecific('info', opts);\r\n  }\r\n\r\n  static debug(opts: LoggerOptions | string) {\r\n    this.logSpecific('debug', opts);\r\n  }\r\n\r\n  static http(opts: string) {\r\n    this.logSpecific('http', opts);\r\n  }\r\n\r\n  static critical(opts: LoggerOptions) {\r\n    const criticalCallback = () => {\r\n      // Todo: handle critical log\r\n    };\r\n    const options = {\r\n      ...DEFAULT_LOGGER_OPTIIONS,\r\n      ...opts,\r\n      callback: criticalCallback,\r\n    };\r\n    this.doLog(options);\r\n  }\r\n\r\n  static morganLog(message: string) {\r\n    this.logger.log('http', message);\r\n  }\r\n\r\n  static header(opts: LoggerOptions | string) {\r\n    this.logSpecific('header', opts);\r\n  }\r\n\r\n  private static logSpecific(\r\n    level: LoggerOptions['level'],\r\n    opts: LoggerOptions | string,\r\n  ) {\r\n    let options: LoggerOptions;\r\n    if (typeof opts === 'string') {\r\n      const { message, location } = this.locationFromMessage(opts);\r\n      options = { ...DEFAULT_LOGGER_OPTIIONS, message, location };\r\n    } else {\r\n      options = this.getOptions(opts);\r\n    }\r\n\r\n    options.level = level;\r\n    this.doLog(options);\r\n  }\r\n\r\n  private static getOptions(opts: LoggerOptions) {\r\n    return { ...DEFAULT_LOGGER_OPTIIONS, ...opts };\r\n  }\r\n\r\n  private static doLog(opts: LoggerOptions) {\r\n    const message = `${opts.message}${opts.location ? ' -- ' + opts.location : ''}`;\r\n    this.logger.log(opts.level ?? 'error', message, opts.callback);\r\n  }\r\n\r\n  private static locationFromMessage(msg: string) {\r\n    const split = msg.split(' -- ');\r\n    if (split.length > 0) {\r\n      return { message: split[1], location: split[0] };\r\n    } else {\r\n      return {\r\n        message: split[0],\r\n        location: DEFAULT_LOGGER_OPTIIONS.location,\r\n      };\r\n    }\r\n  }\r\n}\r\n","import { PipelineData, ProcessorCallback } from 'types/types';\r\n\r\nexport class PipelineProcessor {\r\n  static callbackService: ProcessorCallback;\r\n  private targetId: string;\r\n  constructor(targetId: string) {\r\n    this.targetId = targetId;\r\n  }\r\n  static setCallbackService(callbackService: ProcessorCallback): void {\r\n    PipelineProcessor.callbackService = callbackService;\r\n  }\r\n  async digest(data: PipelineData): Promise<PipelineData> {\r\n    if (PipelineProcessor.callbackService) {\r\n      return await PipelineProcessor.callbackService({\r\n        targetId: this.targetId,\r\n        data,\r\n      });\r\n    }\r\n    return {};\r\n  }\r\n}\r\n","import { Node } from './Node';\r\nimport {\r\n  Callback,\r\n  NodeSignal,\r\n  NodeStatus,\r\n  PipelineData,\r\n  SupervisorPayload,\r\n  CallbackPayload,\r\n  BrodcastMessage,\r\n  ChainConfig,\r\n  ChainRelation,\r\n  NodeConfig,\r\n  NodeType,\r\n  SupervisorPayloadSetup,\r\n  SupervisorPayloadCreate,\r\n  SupervisorPayloadDelay,\r\n  SupervisorPayloadDelete,\r\n  SupervisorPayloadPause,\r\n  SupervisorPayloadRun,\r\n  SupervisorPayloadSendData,\r\n  SetupCallback,\r\n  SupervisorPayloadPrepareChain,\r\n  SupervisorPayloadStartChain,\r\n  SupervisorPayloadDeployChain,\r\n} from '../types/types';\r\nimport { NodeMonitoring } from './NodeMonitoring';\r\nimport { Logger } from '../libs/Logger';\r\nimport { PipelineProcessor } from './PipelineProcessor';\r\nimport { randomUUID } from 'node:crypto';\r\n\r\nexport class NodeSupervisor {\r\n  private uid: string;\r\n  private ctn: string;\r\n  private static instance: NodeSupervisor;\r\n  private nodes: Map<string, Node>;\r\n  private chains: Map<string, ChainRelation>;\r\n\r\n  private nodeMonitoring?: NodeMonitoring;\r\n  private broadcastSetupCallback: SetupCallback;\r\n  remoteServiceCallback: Callback;\r\n\r\n  constructor() {\r\n    this.uid = '@supervisor:default';\r\n    this.ctn = '@container:default';\r\n    this.nodes = new Map();\r\n    this.chains = new Map();\r\n    this.remoteServiceCallback = (_payload: CallbackPayload) => {};\r\n    this.broadcastSetupCallback = async (_message: BrodcastMessage) => {};\r\n  }\r\n\r\n  setRemoteServiceCallback(callback: Callback): void {\r\n    this.remoteServiceCallback = callback;\r\n  }\r\n\r\n  setMonitoring(nodeMonitoring: NodeMonitoring): void {\r\n    this.nodeMonitoring = nodeMonitoring;\r\n  }\r\n\r\n  setBroadcastSetupCallback(\r\n    broadcastSetupCallback: (_message: BrodcastMessage) => Promise<void>,\r\n  ): void {\r\n    this.broadcastSetupCallback = broadcastSetupCallback;\r\n  }\r\n\r\n  setUid(uid: string) {\r\n    this.ctn = `@container:${uid}`;\r\n    this.uid = `@supervisor:${uid}`;\r\n  }\r\n\r\n  static retrieveService(): NodeSupervisor {\r\n    if (!NodeSupervisor.instance) {\r\n      const instance = new NodeSupervisor();\r\n      NodeSupervisor.instance = instance;\r\n    }\r\n    return NodeSupervisor.instance;\r\n  }\r\n\r\n  //\r\n\r\n  async handleRequest(payload: SupervisorPayload): Promise<void | string> {\r\n    switch (payload.signal) {\r\n      case NodeSignal.NODE_SETUP:\r\n        return this.setupNode((payload as SupervisorPayloadSetup).config);\r\n      case NodeSignal.NODE_CREATE:\r\n        return this.createNode((payload as SupervisorPayloadCreate).params);\r\n      case NodeSignal.NODE_DELETE:\r\n        return this.deleteNode((payload as SupervisorPayloadDelete).id);\r\n      case NodeSignal.NODE_PAUSE:\r\n        return this.pauseNode((payload as SupervisorPayloadPause).id);\r\n      case NodeSignal.NODE_DELAY:\r\n        return this.delayNode(\r\n          (payload as SupervisorPayloadDelay).id,\r\n          (payload as SupervisorPayloadDelay).delay,\r\n        );\r\n      case NodeSignal.NODE_RUN:\r\n        return await this.runNode(\r\n          (payload as SupervisorPayloadRun).id,\r\n          (payload as SupervisorPayloadRun).data,\r\n        );\r\n      case NodeSignal.NODE_SEND_DATA:\r\n        return await this.sendNodeData(\r\n          (payload as SupervisorPayloadSendData).id,\r\n        );\r\n      case NodeSignal.CHAIN_PREPARE:\r\n        return await this.prepareChainDistribution(\r\n          (payload as SupervisorPayloadPrepareChain).id,\r\n        );\r\n      case NodeSignal.CHAIN_START:\r\n        return await this.startChain(\r\n          (payload as SupervisorPayloadStartChain).id,\r\n          (payload as SupervisorPayloadStartChain).data,\r\n        );\r\n      case NodeSignal.CHAIN_DEPLOY: {\r\n        return await this.deployChain(\r\n          (payload as SupervisorPayloadDeployChain).config,\r\n          (payload as SupervisorPayloadDeployChain).data,\r\n        );\r\n      }\r\n      default:\r\n        Logger.warn({\r\n          message: `${this.ctn}: Unknown signal received: ${payload.signal}`,\r\n        });\r\n    }\r\n  }\r\n\r\n  private async deployChain(\r\n    config: ChainConfig,\r\n    data: PipelineData,\r\n  ): Promise<string> {\r\n    if (!config) {\r\n      throw new Error(`${this.ctn}: Chain configuration is required`);\r\n    }\r\n    Logger.info({\r\n      message: `${this.ctn}: Starting a new chain deployment...`,\r\n    });\r\n    const chainId = this.createChain(config);\r\n    await this.prepareChainDistribution(chainId);\r\n    await this.startChain(chainId, data);\r\n    Logger.info({\r\n      message: `${this.ctn}: Chain ${chainId} successfully deployed and started.`,\r\n    });\r\n    return chainId;\r\n  }\r\n\r\n  private async createNode(config: NodeConfig): Promise<string> {\r\n    const node = new Node();\r\n    const nodeId = node.getId();\r\n    node.setConfig(config);\r\n    this.nodes.set(nodeId, node);\r\n    if (this.nodeMonitoring) {\r\n      this.nodeMonitoring.addNode(node);\r\n    }\r\n    Logger.info({\r\n      message: `${this.ctn}: Node ${nodeId} created with config: ${JSON.stringify(config)}`,\r\n    });\r\n    return nodeId;\r\n  }\r\n\r\n  private async setupNode(\r\n    config: NodeConfig,\r\n    initiator: boolean = false,\r\n  ): Promise<string> {\r\n    this.updateChain([config]);\r\n\r\n    const nodeId = await this.createNode(config);\r\n    const node = this.nodes.get(nodeId);\r\n    if (node && config.nextTargetId !== undefined) {\r\n      node.setNextNodeInfo(config.nextTargetId, NodeType.REMOTE);\r\n    } else {\r\n      if (!node) {\r\n        Logger.warn({\r\n          message: `${this.ctn}: Attempted to set next node info on undefined node`,\r\n        });\r\n      }\r\n      if (!initiator && config.nextTargetId === undefined) {\r\n        Logger.warn({\r\n          message: `${this.ctn}: Cannot set next node info: nextTargetId is undefined`,\r\n        });\r\n      }\r\n    }\r\n\r\n    const processors = config.services.map(\r\n      (service) => new PipelineProcessor(service),\r\n    );\r\n    await this.addProcessors(nodeId, processors);\r\n    Logger.info({\r\n      message: `${this.ctn}: Node ${nodeId} setup completed with ${processors.length} processors`,\r\n    });\r\n    return nodeId;\r\n  }\r\n\r\n  // Todo: set as private ?\r\n  async addProcessors(\r\n    nodeId: string,\r\n    processors: PipelineProcessor[],\r\n  ): Promise<void> {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      node.addPipeline(processors);\r\n      Logger.info({\r\n        message: `${this.ctn}: Processors added to Node ${nodeId}.`,\r\n      });\r\n    } else {\r\n      Logger.warn({ message: `${this.ctn}: Node ${nodeId} not found.` });\r\n    }\r\n  }\r\n\r\n  private async deleteNode(nodeId: string): Promise<void> {\r\n    if (this.nodes.has(nodeId)) {\r\n      this.nodes.delete(nodeId);\r\n      if (this.nodeMonitoring) {\r\n        this.nodeMonitoring.deleteNode(nodeId);\r\n      }\r\n      Logger.info({ message: `${this.ctn}: Node ${nodeId} deleted.` });\r\n    } else {\r\n      Logger.warn({\r\n        message: `${this.ctn}: Node ${nodeId} not found.`,\r\n      });\r\n    }\r\n  }\r\n\r\n  private async pauseNode(nodeId: string): Promise<void> {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      node.updateStatus(NodeStatus.PAUSED);\r\n      Logger.info({ message: `${this.ctn}: Node ${nodeId} paused.` });\r\n    } else {\r\n      Logger.warn({ message: `${this.ctn}: Node ${nodeId} not found.` });\r\n    }\r\n  }\r\n\r\n  private async delayNode(nodeId: string, delay: number): Promise<void> {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      node.setDelay(delay);\r\n      Logger.info({\r\n        message: `${this.ctn}: Node ${nodeId} delayed by ${delay} ms.`,\r\n      });\r\n    } else {\r\n      Logger.warn({ message: `${this.ctn}: Node ${nodeId} not found.` });\r\n    }\r\n  }\r\n\r\n  createChain(config: ChainConfig): string {\r\n    const timestamp = Date.now();\r\n    const chainId = `${this.uid}-${timestamp}-${randomUUID().slice(0, 8)}`;\r\n    const relation: ChainRelation = {\r\n      config,\r\n    };\r\n    this.chains.set(chainId, relation);\r\n    Logger.header({\r\n      message: `${this.ctn}: Chain ${chainId} creation has started...`,\r\n    });\r\n    return chainId;\r\n  }\r\n\r\n  // todo: review\r\n  private updateChain(config: ChainConfig): string {\r\n    if (config.length === 0 || !config[0].chainId) {\r\n      throw new Error('Invalid chain configuration');\r\n    }\r\n    const chainId = config[0].chainId;\r\n    let relation = this.chains.get(chainId);\r\n\r\n    if (relation) {\r\n      relation.config = relation.config.concat(config);\r\n      Logger.info({\r\n        message: `${this.ctn}: Chain ${chainId} updated with ${config.length} new configurations`,\r\n      });\r\n    } else {\r\n      relation = {\r\n        config: config,\r\n      };\r\n      this.chains.set(chainId, relation);\r\n      Logger.info({\r\n        message: `${this.ctn}: Chain ${chainId} created with ${config.length} configurations`,\r\n      });\r\n    }\r\n    return chainId;\r\n  }\r\n\r\n  async prepareChainDistribution(chainId: string): Promise<void> {\r\n    Logger.header({\r\n      message: `${this.ctn}: Chain distribution for ${chainId} in progress...`,\r\n    });\r\n    const chain = this.chains.get(chainId);\r\n    if (!chain) {\r\n      throw new Error(`${this.ctn}: Chain ${chainId} not found`);\r\n    }\r\n    const chainConfig: ChainConfig = chain.config;\r\n    const localConfigs: NodeConfig[] = chainConfig.filter(\r\n      (config) => config.location === 'local',\r\n    );\r\n    const remoteConfigs: NodeConfig[] = chainConfig.filter(\r\n      (config) => config.location === 'remote',\r\n    );\r\n\r\n    if (localConfigs.length > 0) {\r\n      const rootNodeId = await this.setupNode(\r\n        { ...localConfigs[0], chainId },\r\n        true,\r\n      );\r\n      chain.rootNodeId = rootNodeId;\r\n\r\n      let prevNodeId = rootNodeId;\r\n      for (let i = 1; i < localConfigs.length; i++) {\r\n        const currentNodeId = await this.setupNode(\r\n          {\r\n            ...localConfigs[i],\r\n            chainId,\r\n          },\r\n          true,\r\n        );\r\n        const prevNode = this.nodes.get(prevNodeId);\r\n        if (prevNode) {\r\n          prevNode.setNextNodeInfo(currentNodeId, NodeType.LOCAL);\r\n        }\r\n        prevNodeId = currentNodeId;\r\n      }\r\n\r\n      // Set the last local node to point to the first remote service\r\n      if (remoteConfigs.length > 0 && remoteConfigs[0].services.length > 0) {\r\n        const lastLocalNode = this.nodes.get(prevNodeId);\r\n        if (lastLocalNode) {\r\n          lastLocalNode.setNextNodeInfo(\r\n            remoteConfigs[0].services[0],\r\n            NodeType.REMOTE,\r\n          );\r\n        }\r\n      }\r\n    } else {\r\n      Logger.warn({\r\n        message: `${this.ctn}: No local config found for chain ${chainId}. Root node unavailable.`,\r\n      });\r\n    }\r\n\r\n    if (remoteConfigs.length > 0) {\r\n      const updatedRemoteConfigs = remoteConfigs.map((config, index) => {\r\n        const nextConfig = remoteConfigs[index + 1];\r\n        return {\r\n          ...config,\r\n          nextTargetId: nextConfig ? nextConfig.services[0] : undefined,\r\n        };\r\n      });\r\n      await this.broadcastNodeSetupSignal(chainId, updatedRemoteConfigs);\r\n    }\r\n  }\r\n\r\n  async broadcastNodeSetupSignal(\r\n    chainId: string,\r\n    remoteConfigs: ChainConfig,\r\n  ): Promise<void> {\r\n    const message: BrodcastMessage = {\r\n      signal: NodeSignal.NODE_SETUP,\r\n      chain: {\r\n        id: chainId,\r\n        config: remoteConfigs,\r\n      },\r\n    };\r\n\r\n    try {\r\n      await this.broadcastSetupCallback(message);\r\n      Logger.info({\r\n        message: `${this.ctn}: Node creation signal broadcasted with chainId: ${chainId} for remote configs`,\r\n      });\r\n    } catch (error) {\r\n      Logger.error({\r\n        message: `${this.ctn}: Failed to broadcast node creation signal: ${error}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  async startChain(chainId: string, data: PipelineData): Promise<void> {\r\n    Logger.header({ message: `Chain ${chainId} requested...` });\r\n    const chain = this.chains.get(chainId);\r\n    if (!chain) {\r\n      Logger.warn({ message: `Chain ${chainId} not found.` });\r\n      return;\r\n    }\r\n    const rootNodeId = chain.rootNodeId;\r\n    if (!rootNodeId) {\r\n      Logger.error({\r\n        message: `${this.ctn}: Root node ID for chain ${chainId} not found.`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    const rootNode = this.nodes.get(rootNodeId);\r\n\r\n    if (!rootNode) {\r\n      Logger.error({\r\n        message: `${this.ctn}: Root node ${rootNodeId} for chain ${chainId} not found.`,\r\n      });\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await this.runNode(rootNodeId, data);\r\n      Logger.info({\r\n        message: `${this.ctn}: Chain ${chainId} started with root node ${rootNodeId}.`,\r\n      });\r\n    } catch (error) {\r\n      Logger.error({\r\n        message: `${this.ctn}: Failed to start chain ${chainId}: ${error}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  private async runNode(nodeId: string, data: PipelineData): Promise<void> {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      await node.execute(data);\r\n    } else {\r\n      Logger.warn({ message: `${this.ctn}: Node ${nodeId} not found.` });\r\n    }\r\n  }\r\n\r\n  async runNodeByRelation(payload: CallbackPayload): Promise<void> {\r\n    try {\r\n      const { targetId, chainId, data } = payload;\r\n      Logger.info({\r\n        message: `Received data for node hosting target ${targetId}`,\r\n      });\r\n      if (chainId === undefined) {\r\n        throw new Error('chainId is undefined');\r\n      }\r\n      if (targetId === undefined) {\r\n        throw new Error('targetId is undefined');\r\n      }\r\n      const node = this.getNodesByServiceAndChain(targetId, chainId);\r\n      if (!node || node.length === 0) {\r\n        throw new Error(\r\n          `No node found for targetId ${targetId} and chainId ${chainId}`,\r\n        );\r\n      }\r\n      const nodeId = node[0].getId();\r\n      if (nodeId === undefined) {\r\n        throw new Error(\r\n          `No node ID exists for targetId ${targetId} and chainId ${chainId}`,\r\n        );\r\n      }\r\n      await this.handleRequest({\r\n        signal: NodeSignal.NODE_RUN,\r\n        id: nodeId,\r\n        data: data as PipelineData,\r\n      });\r\n    } catch (error) {\r\n      Logger.error({\r\n        message: `Error in runNodeByRelation: ${(error as Error).message}`,\r\n      });\r\n    }\r\n  }\r\n\r\n  private async sendNodeData(nodeId: string): Promise<void> {\r\n    const node = this.nodes.get(nodeId);\r\n    if (node) {\r\n      try {\r\n        await node.sendData();\r\n      } catch (err) {\r\n        const error = err as Error;\r\n        Logger.error({\r\n          message: `${this.ctn}: Node ${nodeId} send data failed: ${error.message}`,\r\n        });\r\n      }\r\n    } else {\r\n      Logger.warn({ message: `${this.ctn}: Node ${nodeId} not found.` });\r\n    }\r\n  }\r\n\r\n  getNodes(): Map<string, Node> {\r\n    return this.nodes;\r\n  }\r\n\r\n  //\r\n  getNodesByServiceAndChain(serviceUid: string, chainId: string): Node[] {\r\n    return Array.from(this.nodes.values()).filter((node) => {\r\n      const nodeConfig = node.getConfig();\r\n      if (!nodeConfig) {\r\n        return false;\r\n      }\r\n      return (\r\n        nodeConfig.chainId === chainId &&\r\n        nodeConfig.services.includes(serviceUid)\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nexport default NodeSupervisor.retrieveService();\r\n","import { ChainState, NodeStatus } from '../types/types';\r\nimport { ProgressTracker } from './ProgressTracker';\r\nimport { Node } from './Node';\r\nimport { Logger } from '../libs/Logger';\r\n\r\n// Todo: need a full review\r\nexport class NodeMonitoring {\r\n  private nodes: Node[];\r\n  private nodeStatusMap: Map<string, NodeStatus.Type>;\r\n  private progressTracker: ProgressTracker | null;\r\n\r\n  constructor(chainNodes: Node[], progressTracker: ProgressTracker | null) {\r\n    this.nodes = chainNodes;\r\n    this.progressTracker = progressTracker;\r\n    this.nodeStatusMap = new Map();\r\n    this.nodes.forEach((node) => {\r\n      this.nodeStatusMap.set(node.getId(), node.getStatus());\r\n    });\r\n  }\r\n\r\n  addNode(node: Node): void {\r\n    if (!this.nodes.find((n) => n.getId() === node.getId())) {\r\n      const newIndex = this.nodes.length;\r\n      this.nodes.push(node);\r\n      this.nodeStatusMap.set(node.getId(), node.getStatus());\r\n      Logger.info({\r\n        message: `Node ${node.getId()} added to monitoring at index ${newIndex}.`,\r\n      });\r\n    } else {\r\n      Logger.warn({\r\n        message: `Node ${node.getId()} is already being monitored.`,\r\n      });\r\n    }\r\n  }\r\n\r\n  deleteNode(nodeId: string): void {\r\n    const index = this.nodes.findIndex((n) => n.getId() === nodeId);\r\n    if (index !== -1) {\r\n      this.nodes.splice(index, 1);\r\n      this.nodeStatusMap.delete(nodeId);\r\n      Logger.info({ message: `Node ${nodeId} removed from monitoring.` });\r\n    } else {\r\n      Logger.warn({ message: `Node ${nodeId} not found in monitoring.` });\r\n    }\r\n  }\r\n\r\n  updateNodeStatus(\r\n    nodeId: string,\r\n    status: NodeStatus.Type,\r\n    error?: Error,\r\n  ): void {\r\n    const node = this.nodes.find((n) => n.getId() === nodeId);\r\n    if (node) {\r\n      node.updateStatus(status, error);\r\n      this.nodeStatusMap.set(nodeId, status);\r\n      if (this.progressTracker) {\r\n        this.progressTracker.notifyProgress(nodeId, status);\r\n      }\r\n      Logger.info({ message: `Node ${nodeId} status updated to ${status}.` });\r\n    } else {\r\n      Logger.warn({ message: `Node ${nodeId} not found in monitoring.` });\r\n    }\r\n  }\r\n\r\n  getChainState(): ChainState {\r\n    const completed: string[] = [];\r\n    const pending: string[] = [];\r\n    const failed: string[] = [];\r\n\r\n    this.nodes.forEach((node) => {\r\n      const status = node.getStatus();\r\n      if (status === NodeStatus.COMPLETED) {\r\n        completed.push(node.getId());\r\n      } else if (status === NodeStatus.FAILED) {\r\n        failed.push(node.getId());\r\n      } else {\r\n        pending.push(node.getId());\r\n      }\r\n    });\r\n\r\n    return { completed, pending, failed };\r\n  }\r\n\r\n  // Todo: review\r\n  canExecuteNode(nodeId: string): boolean {\r\n    const node = this.nodes.find((n) => n.getId() === nodeId);\r\n    if (node) {\r\n      const completedNodes = new Set(this.getCompletedNodes());\r\n      return node.canExecute(completedNodes);\r\n    } else {\r\n      Logger.warn({ message: `Node ${nodeId} not found in monitoring.` });\r\n      return false;\r\n    }\r\n  }\r\n\r\n  private getCompletedNodes(): string[] {\r\n    return this.nodes\r\n      .filter((node) => node.getStatus() === NodeStatus.COMPLETED)\r\n      .map((node) => node.getId());\r\n  }\r\n\r\n  setProgressTracker(progressTracker: ProgressTracker): void {\r\n    this.progressTracker = progressTracker;\r\n    Logger.info({ message: `ProgressTracker updated.` });\r\n  }\r\n}\r\n","import { Logger } from '../libs/Logger';\r\nimport { NodeStatus } from '../types/types';\r\n\r\nexport class ProgressTracker {\r\n  private totalNodes: number;\r\n  private completedNodes: number = 0;\r\n\r\n  constructor(totalNodes: number) {\r\n    this.totalNodes = totalNodes;\r\n  }\r\n\r\n  notifyProgress(nodeId: string, status: NodeStatus.Type): void {\r\n    if (status === NodeStatus.COMPLETED) {\r\n      this.completedNodes++;\r\n    }\r\n\r\n    const progressPercentage = Math.round(\r\n      (this.completedNodes / this.totalNodes) * 100,\r\n    );\r\n    Logger.info({\r\n      message: `Node ${nodeId}: ${status}. Progress: ${progressPercentage}%`,\r\n    });\r\n  }\r\n}\r\n","import { CombineStrategy, CombineFonction, PipelineData } from '../types/types';\r\n\r\nexport class PipelineDataCombiner {\r\n  private strategy: CombineStrategy.Type;\r\n  private customCombineFunction?: CombineFonction;\r\n\r\n  constructor(\r\n    strategy: CombineStrategy.Type = CombineStrategy.MERGE,\r\n    customCombineFunction?: CombineFonction,\r\n  ) {\r\n    this.strategy = strategy;\r\n    this.customCombineFunction = customCombineFunction;\r\n  }\r\n\r\n  private merge(dataSets: PipelineData[]): PipelineData {\r\n    return dataSets.flat();\r\n  }\r\n\r\n  private union(dataSets: PipelineData[]): PipelineData {\r\n    const mergedData = this.merge(dataSets);\r\n    if (Array.isArray(mergedData)) {\r\n      return Array.from(new Set(mergedData));\r\n    }\r\n    throw new Error('PipelineData must be an array.');\r\n  }\r\n\r\n  applyStrategy(dataSets: PipelineData[]): PipelineData {\r\n    switch (this.strategy) {\r\n      case CombineStrategy.MERGE:\r\n        return this.merge(dataSets);\r\n      case CombineStrategy.UNION:\r\n        return this.union(dataSets);\r\n      case CombineStrategy.CUSTOM:\r\n        if (this.customCombineFunction) {\r\n          return this.customCombineFunction(dataSets);\r\n        }\r\n        throw new Error('Custom combine function is not defined.');\r\n      default:\r\n        throw new Error(`Unknown combine strategy: ${this.strategy}`);\r\n    }\r\n  }\r\n\r\n  setStrategy(strategy: CombineStrategy.Type): void {\r\n    this.strategy = strategy;\r\n  }\r\n\r\n  setCustomCombineFunction(combineFunction: CombineFonction): void {\r\n    this.customCombineFunction = combineFunction;\r\n  }\r\n}\r\n","import { Logger } from '../libs/Logger';\r\nimport { BrodcastMessage, CallbackPayload, ChainConfig } from '../types/types';\r\nimport { Buffer } from 'buffer';\r\nimport { NodeSupervisor } from '../core/NodeSupervisor';\r\nimport * as http from 'http';\r\nimport * as https from 'https';\r\n\r\nexport interface BSCPayload {\r\n  message: BrodcastMessage;\r\n  hostResolver: (_targetId: string) => string | undefined;\r\n  path: string;\r\n}\r\n\r\nexport const broadcastSetupCallback = async (\r\n  payload: BSCPayload,\r\n): Promise<void> => {\r\n  const { message, hostResolver, path } = payload;\r\n  Logger.info({\r\n    message: `Broadcast message: ${JSON.stringify(message, null, 2)}`,\r\n  });\r\n  const chainConfigs: ChainConfig = message.chain.config;\r\n  const chainId: string = message.chain.id;\r\n\r\n  for (const config of chainConfigs) {\r\n    if (config.services.length === 0) {\r\n      Logger.warn({\r\n        message: 'Empty services array encountered in config',\r\n      });\r\n      continue;\r\n    }\r\n    const targetId: string = config.services[0];\r\n    const host = hostResolver(targetId);\r\n    if (!host) {\r\n      Logger.warn({\r\n        message: `No container address found for targetId: ${targetId}`,\r\n      });\r\n      continue;\r\n    }\r\n    try {\r\n      // Send a POST request to set up the node on a remote container with the specified host address\r\n      const postData = JSON.stringify({\r\n        chainId,\r\n        remoteConfigs: config,\r\n      });\r\n\r\n      const url = new URL(path, host);\r\n      const options = {\r\n        hostname: url.hostname,\r\n        port: url.port,\r\n        path: url.pathname,\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Content-Length': Buffer.byteLength(postData),\r\n        },\r\n      };\r\n\r\n      await new Promise((resolve, reject) => {\r\n        const req = (url.protocol === 'https:' ? https : http).request(\r\n          options,\r\n          (res) => {\r\n            let data = '';\r\n            res.on('data', (chunk) => {\r\n              data += chunk;\r\n            });\r\n            res.on('end', () => {\r\n              if (\r\n                res.statusCode &&\r\n                res.statusCode >= 200 &&\r\n                res.statusCode < 300\r\n              ) {\r\n                Logger.info({\r\n                  message: `Setup request sent to ${host} for targetId ${targetId}. Response: ${data}`,\r\n                });\r\n                resolve(data);\r\n              } else {\r\n                Logger.error({\r\n                  message: `Setup request to ${host} for targetId ${targetId} failed with status ${res.statusCode}`,\r\n                });\r\n                reject(\r\n                  new Error(\r\n                    `HTTP Error: ${res.statusCode} ${res.statusMessage} - URL: ${options.hostname}${options.path}`,\r\n                  ),\r\n                );\r\n              }\r\n            });\r\n          },\r\n        );\r\n\r\n        req.on('error', (error) => {\r\n          Logger.error({\r\n            message: `Error sending setup request to ${host} for targetId ${targetId}: ${error.message}`,\r\n          });\r\n          reject(error);\r\n        });\r\n\r\n        req.write(postData);\r\n        req.end();\r\n      });\r\n    } catch (error) {\r\n      Logger.error({\r\n        message: `Unexpected error sending setup request to ${host} for targetId ${targetId}: ${(error as Error).message}`,\r\n      });\r\n    }\r\n  }\r\n};\r\n\r\nexport interface RSCPayload {\r\n  cbPayload: CallbackPayload;\r\n  hostResolver: (_targetId: string) => string | undefined;\r\n  path: string;\r\n}\r\n\r\nexport const remoteServiceCallback = async (payload: RSCPayload) => {\r\n  const { cbPayload, hostResolver, path } = payload;\r\n  Logger.info({\r\n    message: `Service callback payload: ${JSON.stringify(payload, null, 2)}`,\r\n  });\r\n  try {\r\n    if (!cbPayload.chainId) {\r\n      throw new Error('payload.chainId is undefined');\r\n    }\r\n\r\n    const nextConnectorUrl = hostResolver(cbPayload.targetId);\r\n    if (!nextConnectorUrl) {\r\n      throw new Error(\r\n        `Next connector URI not found for the following target service: ${cbPayload.targetId}`,\r\n      );\r\n    }\r\n    const url = new URL(path, nextConnectorUrl);\r\n    Logger.info({\r\n      message: `Sending data to next connector on: ${url.href}`,\r\n    });\r\n\r\n    const postData = JSON.stringify(cbPayload);\r\n    const options = {\r\n      hostname: url.hostname,\r\n      port: url.port,\r\n      path: url.pathname,\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n        'Content-Length': Buffer.byteLength(postData),\r\n      },\r\n    };\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const req = (url.protocol === 'https:' ? https : http).request(\r\n        options,\r\n        (res) => {\r\n          let data = '';\r\n          res.on('data', (chunk) => {\r\n            data += chunk;\r\n          });\r\n          res.on('end', () => {\r\n            if (\r\n              res.statusCode &&\r\n              res.statusCode >= 200 &&\r\n              res.statusCode < 300\r\n            ) {\r\n              resolve(data);\r\n            } else {\r\n              throw new Error(\r\n                `HTTP Error: ${res.statusCode} ${res.statusMessage} - URL: ${options.hostname}${options.path}`,\r\n              );\r\n            }\r\n          });\r\n        },\r\n      );\r\n\r\n      req.on('error', (error) => {\r\n        Logger.error({\r\n          message: `Error sending data to next connector: ${error.message}`,\r\n        });\r\n        reject(error);\r\n      });\r\n\r\n      req.write(postData);\r\n      req.end();\r\n    });\r\n  } catch (error) {\r\n    Logger.error({\r\n      message: `Error sending data to next connector: ${(error as Error).message}`,\r\n    });\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport interface DefaultCallbackPayload {\r\n  supervisor: NodeSupervisor;\r\n  paths: { setup: string; run: string };\r\n  hostResolver: (_targetId: string) => string;\r\n}\r\nexport const setDefaultCallbacks = async (\r\n  dcPayload: DefaultCallbackPayload,\r\n): Promise<void> => {\r\n  const { supervisor, paths, hostResolver } = dcPayload;\r\n\r\n  supervisor.setBroadcastSetupCallback(\r\n    async (message: BrodcastMessage): Promise<void> => {\r\n      const payload: BSCPayload = {\r\n        message,\r\n        hostResolver,\r\n        path: paths.setup,\r\n      };\r\n      await broadcastSetupCallback(payload);\r\n    },\r\n  );\r\n\r\n  supervisor.setRemoteServiceCallback(\r\n    async (cbPayload: CallbackPayload): Promise<void> => {\r\n      const payload: RSCPayload = {\r\n        cbPayload,\r\n        hostResolver,\r\n        path: paths.run,\r\n      };\r\n      await remoteServiceCallback(payload);\r\n    },\r\n  );\r\n};\r\n"],"mappings":"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","names":["NodeType","DataType","CombineStrategy","ChainType","NodeStatus","NodeSignal","level","randomUUID","broadcastSetupCallback","randomUUID","Buffer","path","Buffer"]}